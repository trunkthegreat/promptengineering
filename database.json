{
  "categories": {
    "General": {
      "name": "General",
      "description": "General purpose prompts",
      "prompts": [
        {
          "title": "Example Prompt",
          "description": "Description",
          "content": "Prompt text with [clipboard] placeholder"
        },
        {
          "title": "Podcast-Vietnamese",
          "description": "",
          "content": "\"Tạo một podcast về [CHỦ ĐỀ HOẶC NỘI DUNG] giải thích một cách thực sự chi tiết, càng chi tiết càng tốt.  \nĐối tượng người nghe là [ĐỐI TƯỢNG MỤC TIÊU].  \nPodcast cần mở rộng ra ngoài khuôn khổ lý thuyết, bao gồm các ví dụ thực tiễn và các thông lệ tốt nhất (best practices).  \nThời lượng podcast không bị giới hạn, miễn là đủ để truyền tải đầy đủ mọi nội dung cần thiết.  \nSử dụng các phép ẩn dụ và ví von phù hợp để tăng tính hấp dẫn và cuốn hút cho người nghe.  \nĐồng thời, kết hợp thành ngữ (idioms), cách nói nâng cao và các biện pháp tu từ (như so sánh, nhân hoá, hoán dụ) để làm giàu ngôn ngữ.  \nDùng từ vựng phong phú, chuyển tiếp mượt mà giữa các ý, và thêm các câu hỏi tu từ để khơi gợi suy ngẫm.  \nHãy đảm bảo giọng kể tự nhiên, uyển chuyển, và có điểm nhấn để giữ chân khán giả từ đầu đến cuối.\""
        },
        {
          "title": "Quiz Answer : Prompt Generator",
          "description": "",
          "content": "BEGIN PROMPT\nYou are an assessment-authoring assistant.  \nYour task is to read the user-supplied learning material (inserted below) and return a JSON object that contains quiz-wide settings plus an array of questions that conform to the schema, quality rules, and counts here.\n\n────────────────────────────────────────────────────────\nPLACEHOLDER for source material\n────────────────────────────────────────────────────────\n<<<START-OF-CONTENT>>>\n[[PASTE YOUR CHAPTER / ARTICLE / NOTES HERE]]\n<<<END-OF-CONTENT>>>\n────────────────────────────────────────────────────────\n\n============== 1  GLOBAL OUTPUT RULES ==============\n• Return **exactly one JSON object** with two top-level keys:\n\n```json\n{\n  \"settings\": {               // quiz-wide options\n    \"shuffle\": \"inOrder\"      // \"inOrder\"  |  \"random\"   ←--- SET THIS\n  },\n  \"questions\": [ … ]          // array of Question objects (see §2)\n}\n• Do NOT wrap the object in markdown fences or add commentary.\n• Target counts (total = {{[[Number of questions at least 20 questions]]}}); scale proportionally if the material is too short:\n\nType\tAppearance Ratio\nMultiple Choice\t33%\nTrue/False\t14%\nScenario\t23%\nSequencing\t5%\nCategorizing\t5%\nRanking\t5%\nMatching\t5%\nMerit/Demerit\t5%\nComparison\t5%\n\n(You may optionally add categorizing, matching, meritDemerit, or comparison items; if you do, respect the schema in §2.)\n\n============== 2 QUESTION OBJECT SCHEMA ==============\n\njson\nCopy\nEdit\n{\n  \"type\":         \"multiple\" | \"text\" | \"scenario\" | \"ranking\"\n                 | \"sequencing\" | \"categorizing\" | \"matching\"\n                 | \"meritDemerit\" | \"comparison\",\n\n  \"question\":     string,                   // not used by \"text\"\n  \"text\":         string,                   // only for \"text\"\n  \"scenario\":     string,                   // only for \"scenario\"\n  \"options\":      [string, …],              // multiple, scenario, text, comparison\n  \"items\":        [string, …],              // ranking, sequencing, categorizing\n  \"categories\":   [string, …],              // categorizing, meritDemerit\n  \"correctMap\":   {item: category, …},      // categorizing, meritDemerit\n  \"left\":         [string, …],              // matching\n  \"right\":        [string, …],              // matching\n  \"correctPairs\": [[left, right], …],       // matching\n  \"correct\":      string,                   // multiple, scenario, text, comparison\n  \"correctOrder\": [string, …],              // ranking, sequencing\n  \"timeLimit\":    integer,                  // seconds (default table above)\n  \"feedback\":     string,                   // 1-2 sentences\n  \"StudyPoint\":   string                    // ≤200-word takeaway\n}\n============== 3 QUALITY REQUIREMENTS ==============\n\nAll questions\n– Stem ≤ 25 words; each option/item ≤ 15 words.\n– feedback: why the answer/order is correct (1-2 short sentences).\n– StudyPoint: main concept captured in 150-200 words max, tied to the pasted material.\n\nType-specific\n— multiple • 1 right + 3-4 plausible distractors; parallel wording.\n— text   • Exactly 4 options; statement unequivocally true or false.\n— scenario • Narrative ≤ 80 words; options show realistic decision errors.\n— ranking • 4-6 items; ordering rule explicit; supply correctOrder.\n— sequencing • 4-6 chronological or procedural steps; supply correctOrder.\n— Other types follow the structure in §2 when used.\n\n============== 4 REFERENCE EXCERPT (LIVE EXAMPLES FROM YOUR FILES) ==============\nThe snippet below shows one real example for every type present in your current dataset.\nMimic this structure—but generate new content from the user material.\n\njson\n{\n  \"settings\": { \"shuffle\": \"inOrder\" },\n  \"questions\": [\n    {                                   // ← multiple\n      \"type\": \"multiple\",\n      \"question\": \"According to the chapter, what is the primary purpose of 'boiler-plate' terms?\",\n      \"options\": [\n        \"Fill space in contracts\",\n        \"Provide clarity for dispute resolution\",\n        \"Satisfy minimum length rules\",\n        \"Protect only the seller\"\n      ],\n      \"correct\": \"Provide clarity for dispute resolution\",\n      \"feedback\": \"Boiler-plate clauses clarify interpretation and guide dispute handling.\",\n      \"StudyPoint\": \"Far from filler, boiler-plate provisions—applicable law, dispute resolution, definitions—create the legal scaffolding that prevents ambiguity and streamlines conflict resolution in complex agreements.\"  :contentReference[oaicite:0]{index=0}\n    },\n    {                                   // ← scenario\n      \"type\": \"scenario\",\n      \"scenario\": \"Hiroshi reviews a CBRE–Singapore contract that omits the governing-law clause.\",\n      \"question\": \"Why is specifying applicable law critical?\",\n      \"options\": [\n        \"It sets the payment currency\",\n        \"It governs formation and performance of the contract\",\n        \"Only domestic deals need it\",\n        \"It controls technical specs\"\n      ],\n      \"correct\": \"It governs formation and performance of the contract\",\n      \"feedback\": \"Applicable-law clauses decide which legal system rules disputes.\",\n      \"StudyPoint\": \"In cross-border agreements, parties name the governing law and jurisdiction to avoid forum shopping, reduce uncertainty, and ensure that any litigation or arbitration proceeds under a body of rules they understand and can price into the deal.\"  :contentReference[oaicite:1]{index=1}\n    },\n    {                                   // ← text / true-false\n      \"type\": \"text\",\n      \"text\": \"Arbitration offers privacy compared to court hearings.\",\n      \"options\": [\n        \"True – arbitration is private\",\n        \"False – always public\",\n        \"True – but only for small claims\",\n        \"False – courts are private\"\n      ],\n      \"correct\": \"True – arbitration is private\",\n      \"feedback\": \"Arbitration keeps disputes out of public court records.\",\n      \"StudyPoint\": \"Businesses select arbitration to shield sensitive commercial data, trade secrets, and reputations from the public domain. While awards can be challenged, hearings and filings generally remain confidential unless parties agree otherwise.\"  :contentReference[oaicite:2]{index=2}\n    },\n    {                                   // ← ranking\n      \"type\": \"ranking\",\n      \"question\": \"Rank spec types by seller responsibility:\",\n      \"items\": [\n        \"Technical spec\",\n        \"Functional spec\",\n        \"Performance spec\",\n        \"Requirement spec\"\n      ],\n      \"correctOrder\": [\n        \"Technical spec\",\n        \"Functional spec\",\n        \"Performance spec\",\n        \"Requirement spec\"\n      ],\n      \"feedback\": \"Responsibility grows from meeting form to meeting outcome.\",\n      \"StudyPoint\": \"Technical specs say 'what it must be'; requirement specs say 'what result it must achieve.' As the spec shifts toward outcomes, sellers gain freedom to innovate but shoulder full liability for fitness-for-purpose.\"  :contentReference[oaicite:3]{index=3}\n    },\n    {                                   // ← sequencing\n      \"type\": \"sequencing\",\n      \"question\": \"Order price-agreement methods from most to least competitive:\",\n      \"items\": [\n        \"Competitive tender\",\n        \"Advertisement (invitation to treat)\",\n        \"Single tender\",\n        \"Direct negotiation\"\n      ],\n      \"correctOrder\": [\n        \"Competitive tender\",\n        \"Advertisement (invitation to treat)\",\n        \"Single tender\",\n        \"Direct negotiation\"\n      ],\n      \"feedback\": \"More bidders → greater competition → keener pricing.\",\n      \"StudyPoint\": \"Competitive tenders force suppliers to sharpen bids; direct negotiations lack external pressure. Understanding this spectrum lets buyers balance price tension against speed, confidentiality, and relationship factors.\"  :contentReference[oaicite:4]{index=4}\n    },\n    {\n        \"type\": \"categorizing\",\n        \"question\": \"Trung is reviewing different types of dependencies for CBRE's office expansion project. Categorize the following project situations into 'Internal Dependencies' or 'External Dependencies':\",\n        \"items\": [\n        \"Waiting for Tokyo municipal building permits\",\n        \"Completing electrical work before ceiling installation\",\n        \"Receiving budget approval from Evelyn in Singapore\",\n        \"Hiroshi finishing legal review before contract signing\",\n        \"Obtaining fire safety certification from local authorities\",\n        \"Tanaka completing space planning before furniture ordering\"\n        ],\n        \"categories\": [\"Internal Dependencies\", \"External Dependencies\"],\n        \"correctCategorization\": {\n        \"Internal Dependencies\": [\n            \"Completing electrical work before ceiling installation\",\n            \"Hiroshi finishing legal review before contract signing\",\n            \"Tanaka completing space planning before furniture ordering\"\n        ],\n        \"External Dependencies\": [\n            \"Waiting for Tokyo municipal building permits\",\n            \"Receiving budget approval from Evelyn in Singapore\",\n            \"Obtaining fire safety certification from local authorities\"\n        ]\n        },\n        \"feedback\": \"Internal dependencies are activities entirely under the project manager's control within the team, such as sequencing internal work or completing internal reviews. External dependencies rely on entities outside the project's direct control, such as government approvals, external stakeholder decisions, or regulatory certifications.\"\n    },\n    {\n        \"type\": \"merit_demerit\",\n        \"question\": \"Trung is deciding between using Activity on Arrow (AOA) versus Activity on Node (AON) network diagrams for CBRE's complex office renovation project. Evaluate the merits and demerits of AOA networks:\",\n        \"approach\": \"Activity on Arrow (AOA) Network Diagrams\",\n        \"context\": \"Large-scale office renovation with multiple contractors and complex dependencies\",\n        \"merits\": [\n        \"Shows clear chronological flow between activities\",\n        \"Familiar format for experienced construction managers\",\n        \"Good for projects with many sequential dependencies\",\n        \"Integrates well with traditional project management approaches\"\n        ],\n        \"demerits\": [\n        \"Requires dummy activities to maintain logical correctness\",\n        \"More complex to construct and modify\",\n        \"Harder for team members to understand quickly\",\n        \"Difficult to show non-standard dependency relationships\"\n        ],\n        \"recommendation\": \"Consider AON networks instead\",\n        \"feedback\": \"While AOA networks have historical precedent and work well for sequential projects, their complexity and need for dummy activities make them less practical for modern project management. AON networks are generally easier to construct, understand, and modify, making them more suitable for complex projects with diverse stakeholders like CBRE's renovation.\"\n    },\n    {\n        \"type\": \"comparison\",\n        \"question\": \"Trung needs to choose between Gantt charts and Network diagrams for presenting the office renovation timeline to Evelyn and the Singapore team. Compare these two planning tools:\",\n        \"option1\": \"Gantt Charts\",\n        \"option2\": \"Network Diagrams\",\n        \"criteria\": [\n        \"Visual clarity for non-technical stakeholders\",\n        \"Ability to show activity dependencies\",\n        \"Ease of understanding project timeline\",\n        \"Capability to identify critical path\",\n        \"Suitability for progress tracking\",\n        \"Effectiveness for resource planning\"\n        ],\n        \"comparison\": {\n        \"Visual clarity for non-technical stakeholders\": {\n            \"winner\": \"Gantt Charts\",\n            \"explanation\": \"Gantt charts provide intuitive timeline visualization that executives can understand quickly\"\n        },\n        \"Ability to show activity dependencies\": {\n            \"winner\": \"Network Diagrams\",\n            \"explanation\": \"Network diagrams explicitly show all dependency relationships between activities\"\n        },\n        \"Ease of understanding project timeline\": {\n            \"winner\": \"Gantt Charts\",\n            \"explanation\": \"Time-based horizontal format makes project duration and scheduling immediately apparent\"\n        },\n        \"Capability to identify critical path\": {\n            \"winner\": \"Network Diagrams\",\n            \"explanation\": \"Network diagrams clearly highlight critical path and slack calculations\"\n        },\n        \"Suitability for progress tracking\": {\n            \"winner\": \"Gantt Charts\",\n            \"explanation\": \"Progress bars and milestone markers make status tracking visually obvious\"\n        },\n        \"Effectiveness for resource planning\": {\n            \"winner\": \"Gantt Charts\",\n            \"explanation\": \"Resource allocation over time is easier to visualize and manage with Gantt format\"\n        }\n        },\n        \"recommendation\": \"Use Gantt charts for executive presentation, network diagrams for detailed planning\",\n        \"feedback\": \"Gantt charts excel at communicating schedules to stakeholders and tracking progress, while network diagrams are superior for detailed dependency analysis and critical path identification. The best approach often combines both tools: network diagrams for initial planning and analysis, then Gantt charts for communication and monitoring.\"\n    },\n    {\n        \"type\": \"matching\",\n        \"question\": \"Trung is training his team on project planning tools and techniques. Match each planning tool with its primary purpose in the CBRE office renovation project:\",\n        \"leftItems\": [\n        \"Work Breakdown Structure (WBS)\",\n        \"Network Diagrams\",\n        \"Gantt Charts\",\n        \"Flowcharts\",\n        \"Resource Levelling\",\n        \"Critical Path Method\"\n        ],\n        \"rightItems\": [\n        \"Visualizing timeline and parallel activities for stakeholder communication\",\n        \"Breaking project into manageable, measurable components\",\n        \"Identifying longest sequence of dependent activities\",\n        \"Balancing resource allocation to prevent conflicts\",\n        \"Mapping general process flow and identifying dependencies\",\n        \"Calculating earliest and latest activity start/finish times\"\n        ],\n        \"correctMatches\": {\n        \"Work Breakdown Structure (WBS)\": \"Breaking project into manageable, measurable components\",\n        \"Network Diagrams\": \"Calculating earliest and latest activity start/finish times\",\n        \"Gantt Charts\": \"Visualizing timeline and parallel activities for stakeholder communication\",\n        \"Flowcharts\": \"Mapping general process flow and identifying dependencies\",\n        \"Resource Levelling\": \"Balancing resource allocation to prevent conflicts\",\n        \"Critical Path Method\": \"Identifying longest sequence of dependent activities\"\n        },\n        \"feedback\": \"Each planning tool serves specific purposes in project management. WBS structures the work, flowcharts map processes, network diagrams provide detailed scheduling analysis, Gantt charts communicate timelines, resource levelling optimizes allocation, and critical path method identifies schedule-critical activities. Understanding when to use each tool is essential for effective project planning.\"\n    }\n}\n\n============== 5 VALIDATION CHECKS ==============\n• No duplicate stems or option text.\n• Every correct value, correctOrder element, correctMap value, and correctPairs entry must appear in its respective list.\n• StudyPoint ≤ 150 words.\n• JSON passes a linter.\n\n============== 6 DELIVERY INSTRUCTIONS ==============\nReturn only the final JSON object described in §1—no extra text, no markdown.\nOutput shall be in the same language as input\nEND PROMPT"
        }
      ]
    },
    "ProgrammingIT": {
      "name": "Programming IT",
      "description": "",
      "prompts": [
        {
          "title": "GitHub App Development Prompt",
          "description": "Create App in Github database",
          "content": "Replace [username], [repository-name], and [brand color] with your specific values before using this prompt.\n\nI need you to create a complete GitHub application with the following requirements:\n\n Basic Setup\n- Create an `index.html` file that works as the main interface\n- Include a `database.json` file to store data in hierarchical categories\n- Deploy on GitHub repository: `github/[username]/[repository-name]`\n- Add token authentication - users must enter a valid token before they can edit data\n\n Core Features\n- Search Function: Real-time search with fuzzy matching that works with any language (English, Vietnamese, Chinese, Japanese, etc.). Support multiple keywords separated by commas.\n- Display: Show data as collapsible thumbnail cards organized by categories. Make thumbnails thin/compact to fit many on screen.\n- Click to View: When users click a thumbnail, show a popup with full content and \"Copy\" button.\n- Smart Clipboard: For prompts with `{{placeholder}}` text, add a \"Replace with Clipboard\" button that substitutes the placeholder with current clipboard content.\n- Edit Mode: After token validation, allow users to add, edit, delete categories and items through the interface.\n\n Visual Design\n- Use [brand color] as primary color (e.g., jungle green 228B22)\n- Add checkered pattern background with glass morphism effects\n- High contrast text for readability\n- Thick, glossy borders around elements\n\n Critical Bug Prevention\n1. Unicode Support: Ensure all text input/output works correctly with non-Latin characters (Chinese, Japanese, Vietnamese, Arabic, etc.)\n2. Search Result Accuracy: When displaying search results, maintain correct item IDs so clicking thumbnails shows the right content\n3. Proper Encoding: Use UTF-8 encoding for all GitHub API operations\n\n Expected Deliverables\n- Complete `index.html` file with embedded CSS and JavaScript\n- Sample `database.json` with hierarchical structure\n- Working GitHub API integration for read/write operations\n- Responsive design that works on mobile and desktop\n\nImportant: Test the app with non-English text and verify search results match correctly when clicked. The application should be production-ready and deployable immediately to GitHub Pages."
        },
        {
          "title": "Python App (General)",
          "description": "",
          "content": "I need you to create a complete desktop Python [Short Problem / Software Purpose] application with full CRUD capabilities, robust attachment handling, and a multi-tab GUI:\n\nProject Structure  \n- All files live in a single folder:  \n  - `app.py` — main application entry point  \n  - `database.db` — SQLite database file (empty schema)  \n  - `temp_database.json` — staging area for changes (empty JSON)  \n  - `attachments/` directory for uploaded media and other files (empty)  \n\nDatabase Schema (in `database.db`)  \n- **issues** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `title` (TEXT, required)  \n  - `description` (TEXT, required)  \n  - `status` (TEXT; e.g., “Open”, “In Progress”, “Closed”)  \n  - `priority` (TEXT; e.g., “Low”, “Medium”, “High”)  \n  - `assignee` (TEXT)  \n  - `created_at` (DATETIME)  \n  - `updated_at` (DATETIME)  \n- **attachments** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `issue_id` (INTEGER, foreign key → issues.id)  \n  - `filename` (TEXT)  \n  - `filepath` (TEXT)  \n  - `uploaded_at` (DATETIME)  \n- **audio_notes** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `issue_id` (INTEGER, foreign key → issues.id)  \n  - `filename` (TEXT)  \n  - `filepath` (TEXT)  \n  - `recorded_at` (DATETIME)  \n\nCore Features & CRUD Operations  \n\n1. **Create**  \n   - **Log Issue** (Issue-Logger tab): GUI form fields for title, description, status, priority, assignee, plus “Add Attachments” and “Record Audio Note” buttons.  \n     - On “Create,” write into `temp_database.json`; on “Save,” INSERT into `issues`, `attachments`, and `audio_notes` tables and clear staging.  \n   - **Attach Files**: Select multiple files → save to `attachments/issue_<ID>/`; record file paths in `attachments` table.  \n   - **Record Audio Note**: Record via microphone → save to `attachments/issue_<ID>/audio_<timestamp>.wav`, record in `audio_notes` table.  \n\n2. **Read**  \n   - **Issue Viewer** (Issue-Viewer tab): Display all issues as scrollable, collapsible cards showing ID, title, status, priority.  \n   - **Detail Popup**: Clicking a card opens a popup with full description, assignee, timestamps, attachment thumbnails/previews, and audio playback controls.  \n   - **Download/Open** attachments via buttons; **Play/Pause** audio notes.  \n\n3. **Update** (Edit Mode – all fields and media fully editable)  \n   - In **Edit Mode**, every field (title, description, status, priority, assignee), attachments, and audio notes can be:  \n     - **Edited** (modify text fields)  \n     - **Added** (new attachments via file dialog or “Paste Image from Clipboard” button; new audio via “Record Audio Note”)  \n     - **Deleted** (remove attachments or audio entries)  \n   - Changes go into `temp_database.json`; on “Save Changes,” UPDATE tables and clear staging.  \n\n4. **Delete**  \n   - **Issue**: Confirm then DELETE issue and all its attachments/audio (files + DB rows).  \n   - **Attachment**: Delete single file + DB record without affecting issue.  \n   - **Audio Note**: Delete single audio file + DB record.  \n\n5. **Search & Filter**  \n   - **Search Issues** tab: Real-time fuzzy search over titles & descriptions (multi-keyword, multilingual).  \n   - Filters for status, priority, assignee, and date range.  \n   - Display results as cards with quick-view and link to detail popup.  \n\n6. **Dashboard**  \n   - **Dashboard** tab: Summary widgets—total issues, counts by status/priority, recent activity timeline, and charts of issue trends.  \n\n7. **Smart Clipboard Replacement**  \n   - Wherever text contains `{{placeholder}}`, show “Replace with Clipboard” button to swap in current clipboard.  \n   - **Paste Image from Clipboard**: In both Create and Edit modes, allow pasting image data directly into attachments; show that image in preview panel.  \n\nVisual & UX  \n- Use [brand color] as primary UI accent.  \n- Subtle checkered-pattern background with glass-morphism panels.  \n- High-contrast text; thick, glossy borders.  \n- Responsive layout adapting to window resize.  \n- Tabbed interface (e.g., Tkinter Notebook or PyQt QTabWidget) with four tabs:  \n  1. **Log Issue**  \n  2. **Issue Viewer**  \n  3. **Search Issues**  \n  4. **Dashboard**  \n\nAdditional GUI Instructions  \n- All panels, lists, and controls must be **expandable** and **dynamically stretch** to fill the window when resized.  \n- Ensure **minimum visible sizes**: main text font size = 13 pt, button labels = 12 pt, input fields = 12 pt.  \n- Provide **tooltips** on hover for all icons and buttons.  \n- Ensure **keyboard navigation** support (tab order, focus highlights).  \n- **Attachment Preview Panel**: When an attachment is an image, display its thumbnail on the right side of the GUI.  \n\nBest Practices for a Good GUI  \n1. **Keep it Simple**: Only show essentials—avoid clutter.  \n2. **High Visibility**: Use sufficient contrast and clear labels.  \n3. **Predictable Layout**: Group related controls logically; maintain consistency across tabs.  \n4. **Immediate Feedback**: Show loading indicators, success confirmations, and error messages inline.  \n5. **Accessibility**: Support screen readers, high-contrast mode, and scalable fonts.  \n\nLaunch Scripts & Setup Files  \n- `requirements.txt` — pin all Python dependencies.  \n- `init_db.py` — script to create and initialize `database.db` schema.  \n- `setup.py` — package metadata & entry points for pip installation.  \n- `run.bat` (Windows) & `run.sh` (macOS/Linux) — convenience scripts to install deps, init DB, and launch `app.py`.  \n\nUnicode & Encoding  \n- Full UTF-8 support so non-Latin scripts (Chinese, Japanese, Vietnamese, Arabic, etc.) display, store, and search correctly.  \n\nDeliverables  \n- `app.py` with complete logic: GUI (tabbed), CRUD, search/filtering, dashboard widgets, clipboard/image paste & preview, audio recording/playback, staging and commit from `temp_database.json` to `database.db`.  \n- `requirements.txt`, `init_db.py`, `setup.py`, and `run.bat`/`run.sh`.  \n- Empty `database.db` schema and blank `temp_database.json`.  \n- Empty `attachments/` folder.  \n- README with dependency installation and instructions to launch on Windows, macOS, and Linux.  \n\nTesting Requirements  \n- Verify create/read/update/delete for issues, attachments, and audio notes in each tab and mode.  \n- Confirm attachments (including pasted images) save to and load from correct `issue_<ID>` subfolders.  \n- Confirm audio notes record, play back, and delete correctly.  \n- Test search, filter, and dashboard accuracy with non-English content.  \n- Test resizing: ensure all controls expand and remain legible at various window sizes.  \n- Test clipboard text and image replacement in all relevant areas.  \n\nThis application should be production-ready and launchable directly from its folder."
        },
        {
          "title": "FlaskPython-General",
          "description": "",
          "content": "Unified Development Guidelines for LLM Prompting\nCore Engineering Principles\nDRY + KISS + SOLID Foundation\nAll development must adhere to these fundamental principles:\nDRY (Don't Repeat Yourself)\n\nEliminate code duplication through functions, components, and modules\nCreate reusable utilities and shared configurations\nUse template inheritance and component libraries\n\nKISS (Keep It Simple, Stupid)\n\nPrefer simple, readable solutions over complex architectures\nMinimize dependencies and external libraries\nWrite self-documenting code with clear naming conventions\n\nSOLID Principles\n\nSingle Responsibility: Each module/component has one clear purpose\nOpen/Closed: Extensible without modification of existing code\nLiskov Substitution: Derived classes must be substitutable for base classes\nInterface Segregation: Many specific interfaces over one general interface\nDependency Inversion: Depend on abstractions, not concretions\n\nArchitecture Framework: MAFIAS + SBMF + CRYSTAL + RSR\nMAFIAS (Metadata and Associated Files Indexed and Archived Separately)\nData Architecture Pattern\n\nStore structured metadata in primary database (SQLite/PostgreSQL)\nOrganize unstructured media in separate /attachments/ directory\nMaintain file-to-record mapping for unified presentation\nImplement clean separation between data and media layers\nSupport non-Latin character encodings (e.g., UTF-8 for Japanese, Chinese, Vietnamese) in metadata and file naming\n\n/project\n├── database.db          # Structured metadata\n├── /attachments/        # Media files organized by record ID\n│   ├── /record_1/\n│   ├── /record_2/\n│   └── /uploads/\n\nSBMF (Side Bars & Main Frame)\nUI Layout Pattern\n\nSidebar: Fixed-width navigation (250px expanded, 60px collapsed)\nMain Frame: Flexible content area with responsive grid/flex layouts\nCollapsible Navigation: Toggle button with hamburger icon\nResponsive Behavior: Auto-collapse on mobile (<768px)\nUnicode Support: Render non-Latin characters correctly in navigation and content\n\nCRYSTAL Framework\nVisual Design System\n\nClear Whitespace: Generous margins (40px desktop, 16px mobile)\nRefined Minimalism: Single font family (Inter/Roboto/Noto Sans for non-Latin scripts), limited weights\nYielding Transparency: Frosted-glass panels with backdrop-filter: blur(12px)\nSoft Shadows: Minimal elevation (rgba(0,0,0,0.08))\nTransparent Backgrounds: Semi-transparent surfaces (rgba values)\nAesthetic Typography: Scaled font sizes (16px body, 24px H1, 18px H3)\nLuminous Color Accents: Vibrant soft-green (#2AB67D) primary palette\nNon-Latin Font Support: Use Noto Sans for Japanese, Chinese, Vietnamese, and other non-Latin scripts\n\nRSR (Requirements, Setup, Run - OneClick Windows Deployment)\nZero-Configuration Windows Deployment Pattern\n\nAutomated Environment: One-click Windows setup with intelligent dependency resolution\nWindows-Optimized: Native .bat launcher with Windows-specific optimizations\nSelf-Healing Installation: Automatic error detection and recovery mechanisms\nProgressive Feedback: Real-time installation progress with animated Windows CLI indicators\nIntelligent Defaults: Pre-configured settings optimized for Windows environment\nWindows Integration: Desktop shortcuts, Start Menu entries, and system notifications\nUnicode Handling: Support non-Latin characters in file paths and configuration files\n\nRSR Windows Implementation Components:\n/project\n├── run.bat                 # Windows OneClick launcher (primary entry point)\n├── setup.py               # Automated Windows installation orchestrator\n├── requirements.txt       # Python dependencies with Windows-compatible versions\n├── windows_installer.py   # Windows-specific installation utilities\n├── config/\n│   ├── default.json       # Default application configuration with request timeout settings\n│   ├── database.sql       # Initial database schema\n│   └── sample_data.json   # Optional demo data\n├── scripts/\n│   ├── health_check.py    # Windows system validation\n│   ├── port_finder.py     # Available port detection\n│   ├── cleanup.py         # Uninstall/reset utilities\n│   └── windows_utils.py   # Windows-specific helper functions\n└── README_WINDOWS.md      # Windows-specific setup guide\n\nOneClick Windows Experience Flow:\n\nWindows Environment Check: Python installation detection, Windows version compatibility\nVirtual Environment Setup: Windows venv creation with CMD/PowerShell compatibility\nWindows-Optimized Dependencies: Pip installation with Windows-specific packages and wheels\nDatabase Initialization: SQLite setup with Windows file path handling and UTF-8 encoding\nWindows Configuration: Config generation with Windows-specific paths, settings, and request timeout limits\nWindows Service Launch: Application startup with Windows process management\nWindows Integration: Browser auto-launch, system tray notification, desktop shortcut creation\nWindows Monitoring: Task Manager integration and Windows event logging\n\nAdvanced Windows RSR Features:\n\nWindows Port Discovery: Netstat integration for intelligent port selection (5000-5010)\nWindows Browser Integration: Registry-based default browser detection and launch\nWindows Dependency Caching: AppData local cache for offline installations\nWindows Event Logging: Native Windows event log integration for debugging\nWindows Error Recovery: Windows-specific error codes and suggested fixes\nWindows Resource Monitoring: WMI integration for memory/CPU tracking\nWindows Multi-Instance: Named pipe communication for multiple app instances\nWindows Installer Package: Optional MSI package generation for enterprise deployment\nWindows Auto-Start: Registry entries for automatic startup on Windows boot\nWindows Security Integration: Windows Defender exclusions and UAC handling\n\nOperational Frameworks\nCRUD + OSEI Operations\nData Management Pattern\n\nCRUD: Create, Read, Update, Delete with input validation\nOSEI: Open (display), Save (create/update), Export (JSON), Import (JSON)\nImplement transaction safety and rollback capabilities\nProvide batch operations for efficiency\nSupport non-Latin character input and display in all operations\n\nMEI (Media Embed/Insert)\nMedia Management Pattern\n\nSupport multiple formats: Images (PNG, JPG), Audio (MP3), Documents (PDF)\nEmbed media as HTML tags directly in text fields\nSecure upload handling with file type validation\nAutomatic thumbnail generation for images\nHandle non-Latin filenames and metadata correctly\n\nADE (Add, Delete, Edit Fields)\nDynamic Schema Management\n\nRuntime field addition/removal per record\nStore dynamic fields as JSON in flexible schema\nProvide field type validation and constraints\nSupport field templates and presets\nAllow non-Latin characters in field names and values\n\nMTT + GLTT-DFSF (Multiple Tab Tiers + Grid/List/Thumbnails/Table views)\nInterface Navigation Pattern\n\nMTT: Horizontal tab navigation above main content (max 6 tabs per tier)\nGLTT-DFSF: Multiple view modes with Dynamic Fuzzy matching, Sorting, Filtering\nReal-time search with debounced input\nAdvanced filtering with multiple criteria\nSupport non-Latin character search and filtering\nInclude settings tab for configuring request timeout and response timeout limits\n\nImplementation Standards\nColor Palette Specification\nStrictly adhere to this vibrant, high-contrast palette:\n\n\n\nElement\nHex\nUsage\n\n\n\nPage Background\n#FFFFFF\nMain canvas\n\n\nSurface\n#F2F2F2\nCards, panels, tab bar\n\n\nPrimary Text\n#1A1A1A\nBold body copy\n\n\nSecondary Text\n#4A4A4A\nMetadata, placeholders\n\n\nPrimary Action\n#2AB67D\nVibrant soft-green primary\n\n\nPrimary Hover\n#249F6B\nDarker green hover state\n\n\nSuccess\n#C8F1DD/#1A6646\nSuccess alerts\n\n\nError\n#F8D7DA/#A61C1C\nError alerts\n\n\nWarning\n#FFE8CC/#B35900\nWarning alerts\n\n\nInfo\n#D6EAF8/#1A4D8F\nInfo alerts\n\n\nTypography Standards\n\nFont Family: Inter or Roboto for Latin, Noto Sans for non-Latin scripts (e.g., Japanese, Chinese, Vietnamese)\nFont Weights: Regular (400), Bold (700) only\nFont Sizes: Body (16px), H1 (24px), H3 (18px), Tabs (16px)\nContrast: WCAG 2.1 AA compliance minimum\n\nResponsive Design Requirements\n\nBreakpoints: Mobile (<768px), Tablet (768px-1024px), Desktop (>1024px)\nSidebar Behavior: Auto-collapse on mobile, manual toggle on desktop\nContent Stacking: Vertical stacking on mobile with 16px minimum padding\nTouch Targets: Minimum 44px for mobile interactions\nNon-Latin Text Rendering: Ensure proper rendering of non-Latin scripts across all breakpoints\n\nSecurity & Performance Standards\n\nInput Sanitization: Validate all user inputs, escape outputs, including non-Latin characters\nFile Upload Security: Type validation, size limits, virus scanning, non-Latin filename handling\nDatabase Security: Parameterized queries, transaction management, UTF-8 encoding\nPerformance: Lazy loading, pagination, caching strategies\nError Handling: Graceful degradation, user-friendly error messages\nAsynchronous Processing: Backend processing and server response handling must not block UI operations, allowing parallel user tasks\n\nDevelopment Workflow\nFile Structure Template\n/project\n├── run.bat              # Windows OneClick launcher (MAIN ENTRY POINT)\n├── setup.py             # RSR Windows deployment orchestrator\n├── requirements.txt     # Windows-compatible pinned dependencies\n├── windows_installer.py # Windows-specific installation utilities\n├── app.py              # Main application entry\n├── /config/\n│   ├── default.json    # Default Windows configuration with timeout settings\n│   ├── database.sql    # Database schema\n│   └── sample_data.json # Demo data (optional)\n├── /scripts/\n│   ├── health_check.py # Windows system validation\n│   ├── port_finder.py  # Windows port discovery\n│   ├── cleanup.py      # Windows cleanup utilities\n│   └── windows_utils.py # Windows-specific helpers\n├── /templates/          \n│   ├── base.html       # Base template with SBMF layout\n│   └── index.html      # Main application page\n├── /static/\n│   ├── /css/style.css  # CRYSTAL framework styles\n│   ├── /js/script.js   # Application logic with async server communication\n│   └── /icons/         # SVG icon library\n├── /attachments/       # Media file storage\n├── /models/            # Data models (if using ORM)\n├── /utils/             # Utility functions\n├── database.db         # SQLite database (auto-created)\n└── README_WINDOWS.md   # Windows-specific setup guide\n\nCode Quality Standards\n\nDocumentation: Comprehensive docstrings and inline comments\nNaming: Descriptive variable/function names following convention, supporting non-Latin comments\nModularity: Separate concerns into distinct modules/components\nTesting: Unit tests for core functionality, including non-Latin character handling\nVersion Control: Meaningful commit messages, feature branching\n\nAPI Design Patterns\n# RESTful endpoint structure\nGET    /                 # Main application page\nGET    /api/records      # Retrieve records with pagination\nPOST   /api/records      # Create new record\nPUT    /api/records/<id> # Update existing record  \nDELETE /api/records/<id> # Delete record\nPOST   /api/upload       # Handle media uploads\nGET    /api/export       # Export data\nPOST   /api/import       # Import data\n\nRSR Windows Deployment Standards\nrun.bat Implementation (Enhanced Windows Launcher)\n@echo off\nsetlocal enabledelayedexpansion\ntitle 🚀 OneClick Application Launcher\ncolor 0A\nmode 90,30\n\necho.\necho ╔══════════════════════════════════════════════════════════════╗\necho ║                🚀 OneClick Windows Deployment                ║\necho ║              Professional Application Launcher               ║\necho ╚══════════════════════════════════════════════════════════════╝\necho.\n\n:: Check if running as Administrator\nnet session >nul 2>&1\nif %errorLevel% == 0 (\n    echo [ADMIN] ✅ Running with Administrator privileges\n) else (\n    echo [INFO] 📝 Running with standard user privileges\n)\n\necho.\necho [1/8] 🔍 Windows Environment Check...\npython --version >nul 2>&1\nif errorlevel 1 (\n    echo ❌ Python not found in PATH!\n    echo 📋 Checking Windows Store Python...\n    where python.exe >nul 2>&1\n    if errorlevel 1 (\n        echo ❌ Python not installed on this Windows system\n        echo.\n        echo 🌐 Please install Python 3.8+ from:\n        echo    - Microsoft Store: ms-windows-store://pdp/?ProductId=9NRWMJP3717K\n        echo    - Official Site: https://python.org/downloads/windows/\n        echo.\n        pause\n        exit /b 1\n    )\n)\n\nfor /f \"tokens=2\" %%i in ('python --version 2^>^&1') do set PYTHON_VERSION=%%i\necho ✅ Python %PYTHON_VERSION% detected\n\necho [2/8] 🏗️  Windows Virtual Environment Setup...\nif not exist \"venv\" (\n    echo    Creating new virtual environment...\n    python -m venv venv\n    if errorlevel 1 (\n        echo ❌ Failed to create virtual environment\n        echo 💡 Try: python -m pip install --upgrade pip\n        pause\n        exit /b 1\n    )\n)\necho    Activating virtual environment...\ncall venv\\Scripts\\activate.bat\necho ✅ Virtual environment ready\n\necho [3/8] 📦 Windows Dependencies Installation...\necho    Upgrading pip for Windows...\npython -m pip install --upgrade pip --quiet\necho    Installing application dependencies...\npip install -r requirements.txt --quiet\nif errorlevel 1 (\n    echo ❌ Dependency installation failed\n    echo 💡 Retrying with Windows-specific options...\n    pip install -r requirements.txt --user --no-warn-script-location\n)\necho ✅ Dependencies installed successfully\n\necho [4/8] 🗄️  Windows Database Initialization...\npython setup.py init_db\necho ✅ Database schema created\n\necho [5/8] ⚙️  Windows Configuration Setup...\npython setup.py configure\nfor /f \"tokens=*\" %%i in ('python setup.py get_port') do set APP_PORT=%%i\necho ✅ Configuration complete (Port: %APP_PORT%)\n\necho [6/8] 🔧 Windows System Integration...\npython windows_installer.py create_shortcuts\necho ✅ Desktop shortcut created\n\necho [7/8] 🏥 Windows Health Check...\npython setup.py health_check\nif errorlevel 1 (\n    echo ❌ Health check failed!\n    echo 📋 Check README_WINDOWS.md for troubleshooting\n    pause\n    exit /b 1\n)\necho ✅ All systems operational\n\necho [8/8] 🎉 Windows Application Launch...\necho.\necho ╔══════════════════════════════════════════════════════════════╗\necho ║                    🎉 LAUNCH SUCCESSFUL! 🎉                  ║\necho ║                                                              ║\necho ║  🌐 Opening in your default browser...                       ║\necho ║  📍 Local URL: http://localhost:%APP_PORT%                       ║\necho ║  🎮 Press Ctrl+C to stop the application                    ║\necho ║  📋 Logs are saved to: logs\\application.log                 ║\necho ╚══════════════════════════════════════════════════════════════╝\necho.\n\n:: Windows browser launch with error handling\nstart \"\" \"http://localhost:%APP_PORT%\" 2>nul\nif errorlevel 1 (\n    echo 💡 Manual browser launch required: http://localhost:%APP_PORT%\n)\n\n:: Launch application with Windows process monitoring\npython app.py\necho.\necho 👋 Application stopped. Press any key to exit...\npause >nul\n\nwindows_installer.py Implementation\n#!/usr/bin/env python3\n\"\"\"\nWindows-Specific Installation and Integration Utilities\nHandles Windows shortcuts, registry entries, and system integration\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport sqlite3\nimport socket\nimport subprocess\nimport winreg\nimport win32com.client\nfrom pathlib import Path\nimport psutil\n\nclass WindowsInstaller:\n    def __init__(self):\n        self.project_root = Path(__file__).parent\n        self.config_dir = self.project_root / \"config\"\n        self.database_path = self.project_root / \"database.db\"\n        self.app_name = \"OneClick Application\"\n        \n    def find_available_port(self, start_port=5000, max_attempts=10):\n        \"\"\"Find available port using Windows netstat integration\"\"\"\n        import subprocess\n        \n        # Get active ports using Windows netstat\n        result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)\n        active_ports = set()\n        \n        for line in result.stdout.split('\\n'):\n            if 'LISTENING' in line:\n                try:\n                    port = int(line.split(':')[-1].split()[0])\n                    active_ports.add(port)\n                except (ValueError, IndexError):\n                    continue\n        \n        # Find first available port\n        for port in range(start_port, start_port + max_attempts):\n            if port not in active_ports:\n                return port\n                \n        raise RuntimeError(\"No available ports found in Windows environment\")\n    \n    def create_desktop_shortcut(self):\n        \"\"\"Create Windows desktop shortcut\"\"\"\n        desktop = Path.home() / \"Desktop\"\n        shortcut_path = desktop / f\"{self.app_name}.lnk\"\n        \n        shell = win32com.client.Dispatch(\"WScript.Shell\")\n        shortcut = shell.CreateShortcut(str(shortcut_path))\n        shortcut.Targetpath = str(self.project_root / \"run.bat\")\n        shortcut.WorkingDirectory = str(self.project_root)\n        shortcut.IconLocation = str(self.project_root / \"static\" / \"favicon.ico\")\n        shortcut.Description = f\"Launch {self.app_name}\"\n        shortcut.save()\n        \n        print(f\"✅ Desktop shortcut created: {shortcut_path}\")\n    \n    def register_file_associations(self):\n        \"\"\"Register Windows file associations for project files\"\"\"\n        try:\n            # Register .app file extension\n            with winreg.CreateKey(winreg.HKEY_CURRENT_USER, r\"Software\\Classes\\.appproject\") as key:\n                winreg.SetValue(key, \"\", winreg.REG_SZ, \"OneClickApp\")\n            \n            with winreg.CreateKey(winreg.HKEY_CURRENT_USER, r\"Software\\Classes\\OneClickApp\") as key:\n                winreg.SetValue(key, \"\", winreg.REG_SZ, \"OneClick Application Project\")\n                \n            print(\"✅ Windows file associations registered\")\n        except Exception as e:\n            print(f\"⚠️  File association registration failed: {e}\")\n    \n    def setup_windows_firewall(self, port):\n        \"\"\"Configure Windows Firewall exception for the application\"\"\"\n        try:\n            cmd = [\n                'netsh', 'advfirewall', 'firewall', 'add', 'rule',\n                f'name={self.app_name}',\n                'dir=in', 'action=allow', 'protocol=TCP',\n                f'localport={port}'\n            ]\n            subprocess.run(cmd, check=True, capture_output=True)\n            print(f\"✅ Windows Firewall exception added for port {port}\")\n        except subprocess.CalledProcessError:\n            print(f\"⚠️  Firewall configuration requires Administrator privileges\")\n    \n    def windows_health_check(self):\n        \"\"\"Comprehensive Windows system health check\"\"\"\n        checks = [\n            (\"Windows Version\", self.check_windows_version),\n            (\"Python Installation\", self.check_python_windows),\n            (\"Virtual Environment\", self.check_venv_windows),\n            (\"Windows Permissions\", self.check_windows_permissions),\n            (\"Available Memory\", self.check_windows_memory),\n            (\"Disk Space\", self.check_windows_disk_space),\n            (\"Network Connectivity\", self.check_windows_network)\n        ]\n        \n        print(\"🏥 Windows Health Check Results:\")\n        print(\"=\" * 50)\n        \n        for check_name, check_func in checks:\n            try:\n                result = check_func()\n                print(f\"✅ {check_name}: {result}\")\n            except Exception as e:\n                print(f\"❌ {check_name}: {e}\")\n                return False\n        \n        print(\"=\" * 50)\n        return True\n    \n    def check_windows_version(self):\n        \"\"\"Check Windows version compatibility\"\"\"\n        import platform\n        version = platform.platform()\n        if \"Windows-10\" in version or \"Windows-11\" in version:\n            return f\"Compatible - {version}\"\n        else:\n            raise Exception(f\"Unsupported Windows version: {version}\")\n    \n    def check_windows_memory(self):\n        \"\"\"Check available Windows memory\"\"\"\n        memory = psutil.virtual_memory()\n        available_gb = memory.available / (1024**3)\n        if available_gb < 1:\n            raise Exception(f\"Low memory: {available_gb:.1f}GB available\")\n        return f\"{available_gb:.1f}GB available\"\n\nif __name__ == \"__main__\":\n    installer = WindowsInstaller()\n    \n    if len(sys.argv) > 1:\n        command = sys.argv[1]\n        if command == \"create_shortcuts\":\n            installer.create_desktop_shortcut()\n        elif command == \"health_check\":\n            if not installer.windows_health_check():\n                sys.exit(1)\n        elif command == \"firewall_setup\":\n            port = int(sys.argv[2]) if len(sys.argv) > 2 else 5000\n            installer.setup_windows_firewall(port)\n    else:\n        print(\"Windows Installer - Available commands:\")\n        print(\"  create_shortcuts - Create desktop shortcuts\")\n        print(\"  health_check    - Windows system validation\")\n        print(\"  firewall_setup  - Configure Windows Firewall\")\n\nWindows-Specific Enhancement Features\n\nWindows Registry Integration: Store application preferences in Windows Registry\nWindows Event Logging: Native Windows Event Log integration for monitoring\nWindows Service Mode: Optional Windows Service installation for background operation\nWindows Tray Integration: System tray icon with start/stop/restart functionality\nWindows Auto-Update: MSI package generation for enterprise deployment\nWindows Performance Counters: WMI integration for detailed system monitoring\nWindows Security Center: Integration with Windows Defender and security policies\nWindows Terminal Integration: PowerShell module for advanced users\n\nAcceptance Criteria Template\nFunctional Requirements\n\n All CRUD + OSEI operations working correctly\n Media upload and embedding functional (MEI)\n Dynamic field management operational (ADE)\n Multiple view modes implemented (GLTT-DFSF)\n Search, sort, and filter functionality working\n Export/import capabilities functional\n Non-Latin character support (Japanese, Chinese, Vietnamese) in all operations\n Configurable request and response timeout settings in the settings tab\n Asynchronous backend processing without UI interruption\n\nDesign Requirements\n\n SBMF layout with collapsible sidebar implemented\n CRYSTAL framework visual standards met\n Color palette strictly followed\n Typography standards adhered to, including non-Latin font support\n Responsive design working across all breakpoints\n Accessibility standards met (WCAG 2.1 AA)\n\nTechnical Requirements\n\n DRY, KISS, SOLID principles followed\n Security measures implemented\n Error handling comprehensive\n Performance optimization applied\n Cross-browser compatibility verified\n Code documentation complete\n UTF-8 encoding for non-Latin character support\n Asynchronous server communication for non-blocking UI\n\nRSR Windows Deployment Requirements\n\n OneClick Windows deployment working (run.bat)\n Windows-optimized virtual environment creation\n Windows-compatible dependency installation with error recovery\n Windows database auto-initialization with schema\n Windows-specific configuration file auto-generation\n Windows port discovery with netstat integration\n Windows health check validation system\n Windows browser auto-launch functionality\n Windows progress indicators and user feedback\n Windows desktop shortcut creation\n Windows cleanup and uninstall capabilities\n Windows-specific documentation (README_WINDOWS.md)\n Windows Registry integration (optional)\n Windows Event Log integration (optional)\n Windows Firewall configuration (optional)\n Windows Service mode support (advanced)\n\nUsage Instructions for LLM Prompting\nWhen implementing projects using these guidelines:\n\nReference this document as the foundational specification\nSpecify which frameworks apply to your particular project (e.g., \"Use MAFIAS + SBMF + CRYSTAL + RSR\")\nInclude RSR Windows OneClick deployment as a mandatory requirement for user-friendly installation\nInclude specific requirements from the acceptance criteria relevant to your use case\nEmphasize adherence to DRY, KISS, SOLID principles throughout development\nRequest comprehensive Windows RSR implementation with enhanced run.bat launcher\nEnsure Windows progressive enhancement features for optimal user experience\nRequest documentation of any deviations from these standards with justification\nEnsure non-Latin character support for Japanese, Chinese, Vietnamese, and other scripts\nInclude timeout configuration in the settings tab\nImplement asynchronous processing to allow parallel user tasks during server communication\n\nRSR Windows Implementation Priority:\n\nEssential: run.bat, setup.py, windows_installer.py, requirements.txt, Windows health checks\nEnhanced: Windows progress indicators, auto-browser launch, Windows port discovery\nAdvanced: Windows Registry integration, Windows Service mode, MSI package generation\n\nWindows User Experience:Users need only to:\n\nDownload the project folder to their Windows PC\nDouble-click run.bat \nWait for the automated Windows setup process\nEnjoy the auto-launched application in their default Windows browser"
        },
        {
          "title": "Advanced Flask Template",
          "description": "",
          "content": "🎯 Comprehensive ChatGPT Prompt: Advanced Flask Issue Tracker Application\n\n 📋 Project Overview\n\nCreate a comprehensive, production-ready Flask web application for issue tracking and management. This should be a modern, responsive, and feature-rich system that rivals professional issue tracking tools like Jira or GitHub Issues.\n\n---\n\n 🏗️ Technical Stack Requirements\n\n Backend\n- Framework: Flask (Python 3.8+)\n- Database: SQLite with proper foreign key constraints\n- File Handling: Werkzeug for secure file uploads\n- Session Management: Flask sessions with secure secret keys\n- API: RESTful endpoints for AJAX operations\n\n Frontend\n- Styling: Modern CSS with glassmorphism design\n- JavaScript: Vanilla ES6+ (no external frameworks)\n- Templates: Jinja2 with template inheritance\n- Responsiveness: Mobile-first responsive design\n- Accessibility: WCAG 2.1 AA compliance\n\n Features\n- File Management: Multi-file uploads with drag-and-drop\n- Audio Recording: Browser-based audio note recording\n- Advanced Search: Real-time search with filtering\n- Data Visualization: Charts and statistics dashboard\n- Clipboard Integration: Advanced clipboard paste functionality\n\n---\n\n 🎨 Design Requirements\n\n Visual Theme\n- Style: Modern glassmorphism with gradient backgrounds\n- Color Scheme: Professional blue-purple gradient with high contrast\n- Typography: Clean, readable fonts (Segoe UI family)\n- Icons: Unicode emojis for visual appeal and universal compatibility\n- Animations: Smooth CSS transitions and hover effects\n\n Accessibility Requirements\n- Contrast: Minimum 4.5:1 contrast ratio for all text\n- Keyboard Navigation: Full keyboard accessibility\n- Screen Readers: Proper ARIA labels and semantic HTML\n- Focus Management: Clear focus indicators and logical tab order\n- Responsive Design: Works on all device sizes (320px+)\n\n---\n\n 🗄️ Database Schema\n\nCreate the following tables with proper relationships:\n\n Issues Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- title (TEXT NOT NULL)\n- description (TEXT)\n- status (TEXT DEFAULT 'Open')\n- priority (TEXT DEFAULT 'Medium')\n- assignee (TEXT)\n- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n- updated_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n Attachments Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- issue_id (INTEGER FOREIGN KEY)\n- filename (TEXT NOT NULL)\n- filepath (TEXT NOT NULL)\n- uploaded_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n Audio Notes Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- issue_id (INTEGER FOREIGN KEY)\n- filename (TEXT NOT NULL)\n- filepath (TEXT NOT NULL)\n- recorded_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n---\n\n 🚀 Core Features Implementation\n\n 1. Issue Management (CRUD)\n- Create: Full form with validation and file uploads\n- Read: List view with pagination and detailed modal views\n- Update: Inline editing with real-time updates\n- Delete: Confirmation dialogs with cascade deletion\n\n 2. File Handling System\n- Supported Formats: \n  - Images: PNG, JPG, JPEG, GIF, BMP, WEBP, SVG\n  - Documents: PDF, DOC, DOCX, TXT, RTF, ODT\n  - Audio: MP3, WAV, OGG, AAC, M4A, FLAC\n  - Archives: ZIP, RAR, 7Z, TAR, GZ\n- Features: \n  - Drag-and-drop upload\n  - File preview with thumbnails\n  - Size validation (100MB max)\n  - Secure filename handling\n  - Bulk upload support\n\n 3. Audio Recording\n- Browser Recording: MediaRecorder API integration\n- Features: \n  - Start/stop/play controls\n  - Real-time status updates\n  - Save to issue attachments\n  - Audio format conversion\n  - Permission handling\n\n 4. Advanced Search\n- Text Search: Full-text search in titles and descriptions\n- Filters: Status, Priority, Assignee, Date ranges\n- Live Search: Real-time search suggestions\n- Advanced Options: \n  - Exact phrase matching\n  - Case sensitivity toggle\n  - Search scope selection\n  - Result highlighting\n\n 5. Dashboard & Analytics\n- Metrics: Total issues, by status, by priority\n- Charts: Pie charts, line graphs, progress bars\n- Recent Activity: Latest updates and changes\n- Quick Actions: Rapid navigation and creation\n- System Status: Health monitoring display\n\n---\n\n 🎯 Advanced Features\n\n 1. Staging System\n- Temporary Storage: JSON-based staging before database commit\n- Preview Mode: Review changes before saving\n- Auto-save: Periodic form data preservation\n- Recovery: Restore unsaved work\n\n 2. Clipboard Integration\n- Smart Paste: Enhanced clipboard functionality\n- Image Paste: Direct image paste from clipboard\n- Text Processing: Automatic formatting and cleanup\n- Multiple Formats: Support for different content types\n\n 3. Modal System\n- Dynamic Loading: AJAX-powered content loading\n- Multiple Sizes: Responsive modal sizing\n- Keyboard Navigation: Full keyboard support\n- Focus Management: Proper focus trapping\n\n 4. Real-time Features\n- Live Updates: Auto-refresh for collaboration\n- Status Indicators: Connection and loading states\n- Error Recovery: Graceful error handling\n- Offline Support: Basic offline functionality\n\n---\n\n 📁 File Structure Requirements\n\n```\nflask-issue-tracker/\n├── app.py                  Main application file\n├── init_db.py             Database initialization\n├── requirements.txt       Python dependencies\n├── static/\n│   ├── css/\n│   │   └── main.css      Main stylesheet\n│   └── js/\n│       └── app.js        Main JavaScript\n├── templates/\n│   ├── base.html         Base template\n│   ├── dashboard.html    Dashboard page\n│   ├── log_issue.html    Create issue form\n│   ├── view_issues.html  Issues list\n│   └── search.html       Search page\n├── attachments/          File upload directory\n└── database.db          SQLite database\n```\n\n---\n\n 🔧 Specific Implementation Requirements\n\n Flask Routes\n```python\n@app.route('/')                            Redirect to dashboard\n@app.route('/dashboard')                   Main dashboard\n@app.route('/log', methods=['GET', 'POST'])   Create issue\n@app.route('/issues')                      List all issues\n@app.route('/issues/<id>')                Issue details (JSON)\n@app.route('/issues/<id>/edit')           Edit issue\n@app.route('/issues/<id>/delete')         Delete issue\n@app.route('/search')                     Search issues\n@app.route('/download/<filename>')        File downloads\n@app.route('/attachments/<id>/delete')    Delete attachment\n@app.route('/audio/<id>/delete')          Delete audio\n```\n\n JavaScript Modules\n```javascript\n// Core application modules\n- App (main application state)\n- Utils (utility functions)\n- ClipboardManager (clipboard functionality)\n- FileHandler (file upload and management)\n- AudioRecorder (audio recording features)\n- ModalManager (modal window management)\n- SearchManager (search and filtering)\n- FormManager (form handling and validation)\n- IssueManager (issue CRUD operations)\n- AccessibilityManager (accessibility features)\n```\n\n CSS Architecture\n- Variables: CSS custom properties for theming\n- Responsive: Mobile-first breakpoints\n- Components: Modular component styling\n- Utilities: Helper classes for common patterns\n- Animations: Smooth transitions and effects\n\n---\n\n 🎨 Styling Specifications\n\n Color Palette\n```css\n/ Primary Colors /\n--primary-color: 3B82F6;\n--primary-dark: 2563EB;\n--primary-light: 93C5FD;\n\n/ Status Colors /\n--success-color: 10B981;\n--warning-color: F59E0B;\n--error-color: EF4444;\n--info-color: 06B6D4;\n\n/ Glass Effect /\n--glass-bg: rgba(255, 255, 255, 0.1);\n--glass-border: rgba(255, 255, 255, 0.2);\n--glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n```\n\n Design Patterns\n- Glassmorphism: Semi-transparent elements with blur effects\n- Gradient Backgrounds: Dynamic gradient overlays\n- Micro-interactions: Hover states and click feedback\n- Progressive Enhancement: Works without JavaScript\n- Dark Theme Ready: Easy theme switching capability\n\n---\n\n 🧪 Testing Requirements\n\n Frontend Testing\n- Cross-browser: Chrome, Firefox, Safari, Edge\n- Responsive: Test on mobile, tablet, desktop\n- Accessibility: Screen reader and keyboard testing\n- Performance: Load time and interaction responsiveness\n\n Backend Testing\n- CRUD Operations: All database operations\n- File Uploads: Various file types and sizes\n- Error Handling: Invalid inputs and edge cases\n- Security: SQL injection and file upload security\n\n User Experience Testing\n- Workflow Testing: Complete user journeys\n- Error Recovery: Graceful error handling\n- Performance: Response times under load\n- Accessibility: Screen reader compatibility\n\n---\n\n 📖 Documentation Requirements\n\n Code Documentation\n- Inline Comments: Clear explanations for complex logic\n- Function Documentation: Parameters and return values\n- API Documentation: All endpoints with examples\n- Setup Instructions: Complete installation guide\n\n User Documentation\n- Feature Guide: How to use each feature\n- Troubleshooting: Common issues and solutions\n- Best Practices: Recommended usage patterns\n- FAQ: Frequently asked questions\n\n---\n\n 🔒 Security & Performance\n\n Security Requirements\n- Input Validation: All user inputs sanitized\n- File Upload Security: Type and size validation\n- SQL Injection Prevention: Parameterized queries\n- XSS Protection: Output escaping and CSP headers\n- CSRF Protection: Token-based protection\n\n Performance Optimizations\n- Database Indexing: Proper database indexes\n- File Compression: Optimize static assets\n- Caching: Appropriate caching strategies\n- Lazy Loading: Efficient resource loading\n- Minification: Compressed CSS and JavaScript\n\n---\n\n 🎯 Quality Standards\n\n Code Quality\n- PEP 8: Python code formatting standards\n- ESLint: JavaScript code quality\n- Clean Architecture: Well-organized, maintainable code\n- Error Handling: Comprehensive error management\n- Logging: Appropriate logging throughout\n\n User Experience\n- Intuitive Navigation: Clear, logical user flow\n- Fast Response Times: < 200ms for most operations\n- Visual Feedback: Clear loading and success states\n- Error Messages: Helpful, actionable error messages\n- Consistent Design: Uniform styling throughout\n\n---\n\n 🚀 Bonus Features (If Time Permits)\n\n Advanced Functionality\n- Bulk Operations: Multi-select and batch actions\n- Export/Import: CSV/JSON data exchange\n- Email Notifications: Status change notifications\n- User Authentication: Login and user management\n- Comments System: Discussion threads on issues\n- File Versioning: Track file changes over time\n- Advanced Charts: Interactive data visualizations\n- API Endpoints: RESTful API for external integration\n\n Developer Features\n- Admin Panel: System administration interface\n- Audit Logs: Track all system changes\n- Backup System: Automated data backups\n- Performance Monitoring: System health tracking\n- Plugin System: Extensible architecture\n\n---\n\n 📝 Implementation Approach\n\n Phase 1: Core Foundation\n1. Set up Flask application structure\n2. Create database schema and initialization\n3. Implement basic CRUD operations\n4. Create base templates and styling\n\n Phase 2: Enhanced Features\n1. Add file upload functionality\n2. Implement search and filtering\n3. Create dashboard with statistics\n4. Add modal system for detailed views\n\n Phase 3: Advanced Features\n1. Audio recording capabilities\n2. Advanced clipboard integration\n3. Real-time search and updates\n4. Performance optimizations\n\n Phase 4: Polish & Testing\n1. Accessibility improvements\n2. Cross-browser testing\n3. Performance optimization\n4. Documentation completion\n\n---\n\n 🎯 Success Criteria\n\nThe application should meet these criteria:\n- ✅ Functional: All features work as specified\n- ✅ Responsive: Works on all device sizes\n- ✅ Accessible: Meets WCAG 2.1 AA standards\n- ✅ Performant: Fast response times and smooth interactions\n- ✅ Secure: Properly handles all security concerns\n- ✅ Maintainable: Clean, well-documented code\n- ✅ Professional: Production-ready quality and appearance\n\n---\n\n 📋 Deliverables Checklist\n\n Required Files\n- [ ] `app.py` - Complete Flask application\n- [ ] `init_db.py` - Database initialization script\n- [ ] `requirements.txt` - Python dependencies\n- [ ] `main.css` - Complete stylesheet\n- [ ] `app.js` - JavaScript functionality\n- [ ] All HTML templates (base, dashboard, log_issue, view_issues, search)\n- [ ] README.md with setup instructions\n- [ ] Documentation for all features\n\n Code Quality\n- [ ] No syntax errors or warnings\n- [ ] Proper error handling throughout\n- [ ] Clean, readable code with comments\n- [ ] Consistent naming conventions\n- [ ] Security best practices implemented\n\n Testing\n- [ ] All features manually tested\n- [ ] Cross-browser compatibility verified\n- [ ] Mobile responsiveness confirmed\n- [ ] Accessibility features validated\n- [ ] Performance benchmarks met\n\n---\n\nPlease implement this Flask Issue Tracker application step by step, ensuring each component is fully functional before moving to the next. Focus on creating production-quality code with excellent user experience and robust error handling."
        },
        {
          "title": "HTML GITHUB LITE",
          "description": "",
          "content": "You are an expert full-stack architect. Generate a minimal, modular Flask project that meets these core goals:\n\n1. **Principles**  \n   - Follow DRY, KISS and SOLID.  \n   - Keep file count low; organize by feature modules.\n\n2. **Data & Media**  \n   - Store structured metadata in a database (SQLite/Postgres).  \n   - Place uploads in an attachments directory with clear record-to-file mapping.  \n   - Support UTF-8 for non-Latin filenames and content.\n\n3. **UI Structure**  \n   - SBMF layout: collapsible sidebar + responsive main area.  \n   - CRYSTAL design: generous whitespace, single font family (with non-Latin support), subtle transparency and shadows, a cohesive accent color.\n\n4. **Essential Features**  \n   - CRUD + batch operations for records (Create, Read, Update, Delete).  \n   - Media upload/embed with secure validation and thumbnails.  \n   - Dynamic fields stored flexibly (e.g. JSON).  \n   - Multi-view UI: tabs, list/grid/table, real-time search/filter.  \n   - Settings panel for timeout configuration.\n\n5. **Deployment**  \n   - RSR one-click installer: a simple launcher for Windows (or cross-platform), automated setup, database initialization, and auto-launch.\n\n6. **Quality & Behavior**  \n   - Asynchronous server calls so UI remains responsive.  \n   - Input sanitization and UTF-8 encoding everywhere.  \n   - Clear module boundaries so teams can plug-and-play features.  \n   - Basic unit tests for core paths and non-Latin support.\n\nReturn a concise directory scaffold, key configuration files, and sample code stubs illustrating each requirement."
        },
        {
          "title": "Simplified Flask Application Prompt",
          "description": "",
          "content": "Simplified Flask Application Prompt\nObjective\nDevelop a modular, user-friendly Flask web application with essential functionality, optimized for Windows deployment, focusing on simplicity, modularity, and core features. Adhere to DRY, KISS, and SOLID principles, ensuring maintainability and extensibility while supporting non-Latin character encodings (e.g., UTF-8 for Japanese, Chinese, Vietnamese).\nCore Requirements\nFunctionality\n\nCRUD Operations: Implement Create, Read, Update, Delete with input validation and transaction safety.\nMedia Management: Support image (PNG, JPG), audio (MP3), and document (PDF) uploads with secure handling, thumbnail generation for images, and non-Latin filename support.\nDynamic Schema: Allow runtime addition, deletion, and editing of fields, stored as JSON, with validation and non-Latin character support.\nNavigation & Views: Provide tab-based navigation (max 6 tabs) with grid, list, and table view modes, including real-time search, sorting, and filtering with non-Latin character support.\nData Export/Import: Support JSON-based export and import of records.\nSettings: Include a settings tab for configuring request and response timeout limits.\n\nUser Interface\n\nLayout: Use a responsive layout with a collapsible sidebar (auto-collapse on mobile <768px) and a main content area.\nDesign: Apply a minimal design with a single font (Inter or Noto Sans for non-Latin scripts), a vibrant soft-green primary color (#2AB67D), and WCAG 2.1 AA-compliant contrast.\nResponsive Design: Support mobile (<768px), tablet (768px-1024px), and desktop (>1024px) breakpoints with proper non-Latin text rendering.\n\nTechnical Standards\n\nFramework: Use Flask with SQLite for data storage.\nModularity: Organize code into distinct modules (e.g., routes, models, utilities) for easy extension and testing.\nSecurity: Implement input sanitization, parameterized queries, file type validation, and UTF-8 encoding.\nPerformance: Use lazy loading, pagination, and caching for efficiency.\nAsynchronous Processing: Ensure non-blocking UI with asynchronous backend operations.\n\nWindows Deployment\n\nOne-Click Setup: Provide a run.bat script for automated Windows setup, including:\nPython and virtual environment validation.\nDependency installation via requirements.txt.\nDatabase initialization with UTF-8 support.\nAutomatic browser launch to http://localhost:<port>.\n\n\nPortability: Minimize files while ensuring functionality, with a modular structure for easy maintenance.\n\nFile Structure\n/project\n├── run.bat              # Windows launcher\n├── app.py               # Main Flask application\n├── requirements.txt     # Python dependencies\n├── /templates/          # HTML templates\n│   ├── base.html        # Base layout\n│   └── index.html       # Main page\n├── /static/             # Static assets\n│   ├── css/style.css    # Stylesheet\n│   └── js/script.js     # Client-side scripts\n├── /models/             # Data models\n│   └── models.py        # Database models\n├── /utils/              # Utility functions\n│   └── utils.py         # Shared utilities\n├── /attachments/        # Media storage\n└── database.db          # SQLite database\n\nAPI Endpoints\n\nGET / - Main application page\nGET /api/records - Retrieve records (with pagination)\nPOST /api/records - Create record\nPUT /api/records/<id> - Update record\nDELETE /api/records/<id> - Delete record\nPOST /api/upload - Upload media\nGET /api/export - Export data as JSON\nPOST /api/import - Import JSON data\n\nAcceptance Criteria\n\nAll CRUD operations are functional with non-Latin character support.\nMedia uploads and dynamic schema management work seamlessly.\nNavigation and view modes (grid/list/table) support search, sort, and filter.\nExport/import functionality handles JSON correctly.\nUI is responsive, accessible, and visually consistent.\nWindows deployment via run.bat is automated and user-friendly.\nCode is modular, documented, and adheres to DRY, KISS, SOLID principles.\nSecurity and performance measures are implemented.\n\nNotes\n\nPrioritize simplicity and modularity to reduce development complexity.\nEnsure all modules are independent for easy testing and extension.\nSupport non-Latin characters in all inputs, outputs, and file handling.\nKeep the file count minimal while maintaining full functionality."
        }
      ]
    },
    "Business": {
      "name": "Business",
      "description": "",
      "prompts": [
        {
          "title": "Strategy Brainstormer",
          "description": "Provide Solution to Business Problem",
          "content": "You are a world-class strategy consultant skilled in competitive analysis, pricing, growth loops, and product strategy. \nIf you can’t find data, say so. \nContext: \n   -   Company: [COMPANY]\n   -   Industry: [INDUSTRY]\n   -   Current Status: [Brief summary: what the company does, how it makes money, who it serves, pricing model, and growth tactics]\n   -   Challenges: [List the main issues — e.g., flat growth, rising costs, regulation]\n\nYour Task: \n   -   Analyze the competition: \n       •  Find 3–5 direct competitors and 1–2 adjacent ones. \n       •  For each, explain how they’re positioned, what they charge, and what they’re doing. Find opportunities: \n       •  Compare [COMPANY] to competitors. \n       •  List 5+ growth or profit levers they haven’t used yet. \nPrioritize: \n       •  Score each idea: Impact: Revenue/profit upside (1–5) Feasibility: Ease + speed (1–5) \n       •  Recommend the top 3 based on both scores. \n\nHow to Work: Go deep.\nRead up to 200 pages if needed. Use any source: websites, tools, forums, data platforms."
        }
      ]
    },
    "Languistic": {
      "name": "Linguistic",
      "description": "",
      "prompts": [
        {
          "title": "Speaking Hone Up",
          "description": "",
          "content": "You are an expert English teacher. Your task is to take the raw, spoken English provided in brackets and produce a polished version that:\n\n- Corrects all grammatical errors and refines vocabulary.\n- Improves clarity and logical flow, making only minimal rearrangements.\n- Preserves the speaker’s original thought process, style, and intent.\n\nAlways receive input in the form:\nContent = {{[[ ]]}}\n\nAnd return only the revised sentence or paragraph."
        }
      ]
    }
  },
  "version": "1.0"
}