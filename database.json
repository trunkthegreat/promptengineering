{
  "categories": {
    "General": {
      "name": "General",
      "description": "General purpose prompts",
      "prompts": [
        {
          "title": "Example Prompt",
          "description": "Description",
          "content": "Prompt text with [clipboard] placeholder"
        },
        {
          "title": "Podcast-Vietnamese",
          "description": "",
          "content": "Tạo một podcast về [CHỦ ĐỀ HOẶC NỘI DUNG] giải thích một cách thực sự chi tiết, càng chi tiết càng tốt. \nĐối tượng người nghe là [ĐỐI TƯỢNG MỤC TIÊU]. \nPodcast cần mở rộng ra ngoài khuôn khổ lý thuyết, bao gồm các ví dụ thực tiễn và các thông lệ tốt nhất (best practices). \nThời lượng podcast không bị giới hạn, miễn là đủ để truyền tải đầy đủ mọi nội dung cần thiết. \nSử dụng các phép ẩn dụ và ví von phù hợp để tăng tính hấp dẫn và cuốn hút cho người nghe."
        }
      ]
    },
    "ProgrammingIT": {
      "name": "Programming IT",
      "description": "",
      "prompts": [
        {
          "title": "GitHub App Development Prompt",
          "description": "Create App in Github database",
          "content": "Replace [username], [repository-name], and [brand color] with your specific values before using this prompt.\n\nI need you to create a complete GitHub application with the following requirements:\n\n Basic Setup\n- Create an `index.html` file that works as the main interface\n- Include a `database.json` file to store data in hierarchical categories\n- Deploy on GitHub repository: `github/[username]/[repository-name]`\n- Add token authentication - users must enter a valid token before they can edit data\n\n Core Features\n- Search Function: Real-time search with fuzzy matching that works with any language (English, Vietnamese, Chinese, Japanese, etc.). Support multiple keywords separated by commas.\n- Display: Show data as collapsible thumbnail cards organized by categories. Make thumbnails thin/compact to fit many on screen.\n- Click to View: When users click a thumbnail, show a popup with full content and \"Copy\" button.\n- Smart Clipboard: For prompts with `{{placeholder}}` text, add a \"Replace with Clipboard\" button that substitutes the placeholder with current clipboard content.\n- Edit Mode: After token validation, allow users to add, edit, delete categories and items through the interface.\n\n Visual Design\n- Use [brand color] as primary color (e.g., jungle green 228B22)\n- Add checkered pattern background with glass morphism effects\n- High contrast text for readability\n- Thick, glossy borders around elements\n\n Critical Bug Prevention\n1. Unicode Support: Ensure all text input/output works correctly with non-Latin characters (Chinese, Japanese, Vietnamese, Arabic, etc.)\n2. Search Result Accuracy: When displaying search results, maintain correct item IDs so clicking thumbnails shows the right content\n3. Proper Encoding: Use UTF-8 encoding for all GitHub API operations\n\n Expected Deliverables\n- Complete `index.html` file with embedded CSS and JavaScript\n- Sample `database.json` with hierarchical structure\n- Working GitHub API integration for read/write operations\n- Responsive design that works on mobile and desktop\n\nImportant: Test the app with non-English text and verify search results match correctly when clicked. The application should be production-ready and deployable immediately to GitHub Pages."
        },
        {
          "title": "Python App for Issue-Tracker",
          "description": "",
          "content": "Replace any placeholder values (e.g., [brand color]) with your specific choices before using this prompt.\n\nI need you to create a complete desktop Python issue-tracker application with full CRUD capabilities, robust attachment handling, and a multi-tab GUI:\n\nProject Structure  \n- All files live in a single folder:  \n  - `app.py` — main application entry point  \n  - `database.db` — SQLite database file (empty schema)  \n  - `temp_database.json` — staging area for changes (empty JSON)  \n  - `attachments/` directory for uploaded media and other files (empty)  \n\nDatabase Schema (in `database.db`)  \n- **issues** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `title` (TEXT, required)  \n  - `description` (TEXT, required)  \n  - `status` (TEXT; e.g., “Open”, “In Progress”, “Closed”)  \n  - `priority` (TEXT; e.g., “Low”, “Medium”, “High”)  \n  - `assignee` (TEXT)  \n  - `created_at` (DATETIME)  \n  - `updated_at` (DATETIME)  \n- **attachments** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `issue_id` (INTEGER, foreign key → issues.id)  \n  - `filename` (TEXT)  \n  - `filepath` (TEXT)  \n  - `uploaded_at` (DATETIME)  \n\nCore Features & CRUD Operations  \n\n1. **Create**  \n   - **Log Issue** (Issue-Logger tab): GUI form fields for title, description, status, priority, assignee, plus “Add Attachments” button.  \n     - On “Create,” write into `temp_database.json`; on “Save,” INSERT into `issues` table and clear staging.  \n   - **Attach Files**: Select multiple files → save to `attachments/issue_<ID>/`; record file paths in `attachments` table.  \n\n2. **Read**  \n   - **Issue Viewer** (Issue-Viewer tab): Display all issues as scrollable, collapsible cards showing ID, title, status, priority.  \n   - **Detail Popup**: Clicking a card opens a popup with full description, assignee, timestamps, and attachment thumbnails/previews.  \n   - **Download/Open** attachments via buttons.  \n\n3. **Update**  \n   - **Edit Issue** (in Issue-Viewer or Log Issue tab): Modify title, description, status, priority, assignee.  \n     - Changes go into `temp_database.json`; on “Save Changes,” UPDATE the `issues` table and clear staging.  \n   - **Manage Attachments**:  \n     - Add: copy new files → `attachments/issue_<ID>/` + INSERT  \n     - Remove: delete file + DELETE record  \n\n4. **Delete**  \n   - **Issue**: Confirm then DELETE issue and all its attachments (files + DB rows).  \n   - **Attachment**: Delete single file + DB record without affecting issue.  \n\n5. **Search & Filter**  \n   - **Search Issues** tab: Real-time fuzzy search over titles & descriptions (multi-keyword, multilingual).  \n   - Filters for status, priority, assignee, and date range.  \n   - Display results as cards with quick-view and link to detail popup.  \n\n6. **Dashboard**  \n   - **Dashboard** tab: Summary widgets—total issues, counts by status/priority, recent activity timeline, and charts of issue trends.  \n\n7. **Smart Clipboard Replacement**  \n   - Wherever text contains `{{placeholder}}`, show “Replace with Clipboard” button to swap in current clipboard.  \n\nVisual & UX  \n- Use [brand color] as primary UI accent.  \n- Subtle checkered-pattern background with glass-morphism panels.  \n- High-contrast text; thick, glossy borders.  \n- Responsive layout adapting to window resize.  \n- Tabbed interface (e.g., Tkinter Notebook or PyQt QTabWidget) with four tabs:  \n  1. **Log Issue**  \n  2. **Issue Viewer**  \n  3. **Search Issues**  \n  4. **Dashboard**  \n\nUnicode & Encoding  \n- Full UTF-8 support so non-Latin scripts (Chinese, Japanese, Vietnamese, Arabic, etc.) display, store, and search correctly.  \n\nDeliverables  \n- `app.py` with complete logic: GUI (tabbed), CRUD, search/filtering, dashboard widgets, clipboard replacement, staging and commit from `temp_database.json` to `database.db`.  \n- Empty `database.db` schema and blank `temp_database.json`.  \n- Empty `attachments/` folder.  \n- README with dependency installation and instructions to launch on Windows, macOS, and Linux.  \n\nTesting Requirements  \n- Verify create/read/update/delete for issues and attachments in each tab.  \n- Confirm attachments save to and load from correct `issue_<ID>` subfolders.  \n- Test search, filter, and dashboard accuracy with non-English content.  \n- Test clipboard replacement in all relevant text areas.  \n\nThis application should be production-ready and launchable directly from its folder."
        }
      ]
    },
    "Business": {
      "name": "Business",
      "description": "",
      "prompts": [
        {
          "title": "Strategy Brainstormer",
          "description": "Provide Solution to Business Problem",
          "content": "You are a world-class strategy consultant skilled in competitive analysis, pricing, growth loops, and product strategy. \nIf you can’t find data, say so. \nContext: \n   -   Company: [COMPANY]\n   -   Industry: [INDUSTRY]\n   -   Current Status: [Brief summary: what the company does, how it makes money, who it serves, pricing model, and growth tactics]\n   -   Challenges: [List the main issues — e.g., flat growth, rising costs, regulation]\n\nYour Task: \n   -   Analyze the competition: \n       •  Find 3–5 direct competitors and 1–2 adjacent ones. \n       •  For each, explain how they’re positioned, what they charge, and what they’re doing. Find opportunities: \n       •  Compare [COMPANY] to competitors. \n       •  List 5+ growth or profit levers they haven’t used yet. \nPrioritize: \n       •  Score each idea: Impact: Revenue/profit upside (1–5) Feasibility: Ease + speed (1–5) \n       •  Recommend the top 3 based on both scores. \n\nHow to Work: Go deep.\nRead up to 200 pages if needed. Use any source: websites, tools, forums, data platforms."
        }
      ]
    }
  },
  "version": "1.0"
}