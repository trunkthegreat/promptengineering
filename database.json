{
  "categories": {
    "General": {
      "name": "General",
      "description": "General purpose prompts",
      "prompts": [
        {
          "title": "Example Prompt",
          "description": "Description",
          "content": "Prompt text with [clipboard] placeholder"
        },
        {
          "title": "Podcast-Vietnamese",
          "description": "",
          "content": "Tạo một podcast về [CHỦ ĐỀ HOẶC NỘI DUNG] giải thích một cách thực sự chi tiết, càng chi tiết càng tốt. \nĐối tượng người nghe là [ĐỐI TƯỢNG MỤC TIÊU]. \nPodcast cần mở rộng ra ngoài khuôn khổ lý thuyết, bao gồm các ví dụ thực tiễn và các thông lệ tốt nhất (best practices). \nThời lượng podcast không bị giới hạn, miễn là đủ để truyền tải đầy đủ mọi nội dung cần thiết. \nSử dụng các phép ẩn dụ và ví von phù hợp để tăng tính hấp dẫn và cuốn hút cho người nghe."
        }
      ]
    },
    "ProgrammingIT": {
      "name": "Programming IT",
      "description": "",
      "prompts": [
        {
          "title": "GitHub App Development Prompt",
          "description": "Create App in Github database",
          "content": "Replace [username], [repository-name], and [brand color] with your specific values before using this prompt.\n\nI need you to create a complete GitHub application with the following requirements:\n\n Basic Setup\n- Create an `index.html` file that works as the main interface\n- Include a `database.json` file to store data in hierarchical categories\n- Deploy on GitHub repository: `github/[username]/[repository-name]`\n- Add token authentication - users must enter a valid token before they can edit data\n\n Core Features\n- Search Function: Real-time search with fuzzy matching that works with any language (English, Vietnamese, Chinese, Japanese, etc.). Support multiple keywords separated by commas.\n- Display: Show data as collapsible thumbnail cards organized by categories. Make thumbnails thin/compact to fit many on screen.\n- Click to View: When users click a thumbnail, show a popup with full content and \"Copy\" button.\n- Smart Clipboard: For prompts with `{{placeholder}}` text, add a \"Replace with Clipboard\" button that substitutes the placeholder with current clipboard content.\n- Edit Mode: After token validation, allow users to add, edit, delete categories and items through the interface.\n\n Visual Design\n- Use [brand color] as primary color (e.g., jungle green 228B22)\n- Add checkered pattern background with glass morphism effects\n- High contrast text for readability\n- Thick, glossy borders around elements\n\n Critical Bug Prevention\n1. Unicode Support: Ensure all text input/output works correctly with non-Latin characters (Chinese, Japanese, Vietnamese, Arabic, etc.)\n2. Search Result Accuracy: When displaying search results, maintain correct item IDs so clicking thumbnails shows the right content\n3. Proper Encoding: Use UTF-8 encoding for all GitHub API operations\n\n Expected Deliverables\n- Complete `index.html` file with embedded CSS and JavaScript\n- Sample `database.json` with hierarchical structure\n- Working GitHub API integration for read/write operations\n- Responsive design that works on mobile and desktop\n\nImportant: Test the app with non-English text and verify search results match correctly when clicked. The application should be production-ready and deployable immediately to GitHub Pages."
        },
        {
          "title": "Python App (General)",
          "description": "",
          "content": "I need you to create a complete desktop Python [Short Problem / Software Purpose] application with full CRUD capabilities, robust attachment handling, and a multi-tab GUI:\n\nProject Structure  \n- All files live in a single folder:  \n  - `app.py` — main application entry point  \n  - `database.db` — SQLite database file (empty schema)  \n  - `temp_database.json` — staging area for changes (empty JSON)  \n  - `attachments/` directory for uploaded media and other files (empty)  \n\nDatabase Schema (in `database.db`)  \n- **issues** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `title` (TEXT, required)  \n  - `description` (TEXT, required)  \n  - `status` (TEXT; e.g., “Open”, “In Progress”, “Closed”)  \n  - `priority` (TEXT; e.g., “Low”, “Medium”, “High”)  \n  - `assignee` (TEXT)  \n  - `created_at` (DATETIME)  \n  - `updated_at` (DATETIME)  \n- **attachments** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `issue_id` (INTEGER, foreign key → issues.id)  \n  - `filename` (TEXT)  \n  - `filepath` (TEXT)  \n  - `uploaded_at` (DATETIME)  \n- **audio_notes** table:  \n  - `id` (INTEGER PRIMARY KEY AUTOINCREMENT)  \n  - `issue_id` (INTEGER, foreign key → issues.id)  \n  - `filename` (TEXT)  \n  - `filepath` (TEXT)  \n  - `recorded_at` (DATETIME)  \n\nCore Features & CRUD Operations  \n\n1. **Create**  \n   - **Log Issue** (Issue-Logger tab): GUI form fields for title, description, status, priority, assignee, plus “Add Attachments” and “Record Audio Note” buttons.  \n     - On “Create,” write into `temp_database.json`; on “Save,” INSERT into `issues`, `attachments`, and `audio_notes` tables and clear staging.  \n   - **Attach Files**: Select multiple files → save to `attachments/issue_<ID>/`; record file paths in `attachments` table.  \n   - **Record Audio Note**: Record via microphone → save to `attachments/issue_<ID>/audio_<timestamp>.wav`, record in `audio_notes` table.  \n\n2. **Read**  \n   - **Issue Viewer** (Issue-Viewer tab): Display all issues as scrollable, collapsible cards showing ID, title, status, priority.  \n   - **Detail Popup**: Clicking a card opens a popup with full description, assignee, timestamps, attachment thumbnails/previews, and audio playback controls.  \n   - **Download/Open** attachments via buttons; **Play/Pause** audio notes.  \n\n3. **Update** (Edit Mode – all fields and media fully editable)  \n   - In **Edit Mode**, every field (title, description, status, priority, assignee), attachments, and audio notes can be:  \n     - **Edited** (modify text fields)  \n     - **Added** (new attachments via file dialog or “Paste Image from Clipboard” button; new audio via “Record Audio Note”)  \n     - **Deleted** (remove attachments or audio entries)  \n   - Changes go into `temp_database.json`; on “Save Changes,” UPDATE tables and clear staging.  \n\n4. **Delete**  \n   - **Issue**: Confirm then DELETE issue and all its attachments/audio (files + DB rows).  \n   - **Attachment**: Delete single file + DB record without affecting issue.  \n   - **Audio Note**: Delete single audio file + DB record.  \n\n5. **Search & Filter**  \n   - **Search Issues** tab: Real-time fuzzy search over titles & descriptions (multi-keyword, multilingual).  \n   - Filters for status, priority, assignee, and date range.  \n   - Display results as cards with quick-view and link to detail popup.  \n\n6. **Dashboard**  \n   - **Dashboard** tab: Summary widgets—total issues, counts by status/priority, recent activity timeline, and charts of issue trends.  \n\n7. **Smart Clipboard Replacement**  \n   - Wherever text contains `{{placeholder}}`, show “Replace with Clipboard” button to swap in current clipboard.  \n   - **Paste Image from Clipboard**: In both Create and Edit modes, allow pasting image data directly into attachments; show that image in preview panel.  \n\nVisual & UX  \n- Use [brand color] as primary UI accent.  \n- Subtle checkered-pattern background with glass-morphism panels.  \n- High-contrast text; thick, glossy borders.  \n- Responsive layout adapting to window resize.  \n- Tabbed interface (e.g., Tkinter Notebook or PyQt QTabWidget) with four tabs:  \n  1. **Log Issue**  \n  2. **Issue Viewer**  \n  3. **Search Issues**  \n  4. **Dashboard**  \n\nAdditional GUI Instructions  \n- All panels, lists, and controls must be **expandable** and **dynamically stretch** to fill the window when resized.  \n- Ensure **minimum visible sizes**: main text font size = 13 pt, button labels = 12 pt, input fields = 12 pt.  \n- Provide **tooltips** on hover for all icons and buttons.  \n- Ensure **keyboard navigation** support (tab order, focus highlights).  \n- **Attachment Preview Panel**: When an attachment is an image, display its thumbnail on the right side of the GUI.  \n\nBest Practices for a Good GUI  \n1. **Keep it Simple**: Only show essentials—avoid clutter.  \n2. **High Visibility**: Use sufficient contrast and clear labels.  \n3. **Predictable Layout**: Group related controls logically; maintain consistency across tabs.  \n4. **Immediate Feedback**: Show loading indicators, success confirmations, and error messages inline.  \n5. **Accessibility**: Support screen readers, high-contrast mode, and scalable fonts.  \n\nLaunch Scripts & Setup Files  \n- `requirements.txt` — pin all Python dependencies.  \n- `init_db.py` — script to create and initialize `database.db` schema.  \n- `setup.py` — package metadata & entry points for pip installation.  \n- `run.bat` (Windows) & `run.sh` (macOS/Linux) — convenience scripts to install deps, init DB, and launch `app.py`.  \n\nUnicode & Encoding  \n- Full UTF-8 support so non-Latin scripts (Chinese, Japanese, Vietnamese, Arabic, etc.) display, store, and search correctly.  \n\nDeliverables  \n- `app.py` with complete logic: GUI (tabbed), CRUD, search/filtering, dashboard widgets, clipboard/image paste & preview, audio recording/playback, staging and commit from `temp_database.json` to `database.db`.  \n- `requirements.txt`, `init_db.py`, `setup.py`, and `run.bat`/`run.sh`.  \n- Empty `database.db` schema and blank `temp_database.json`.  \n- Empty `attachments/` folder.  \n- README with dependency installation and instructions to launch on Windows, macOS, and Linux.  \n\nTesting Requirements  \n- Verify create/read/update/delete for issues, attachments, and audio notes in each tab and mode.  \n- Confirm attachments (including pasted images) save to and load from correct `issue_<ID>` subfolders.  \n- Confirm audio notes record, play back, and delete correctly.  \n- Test search, filter, and dashboard accuracy with non-English content.  \n- Test resizing: ensure all controls expand and remain legible at various window sizes.  \n- Test clipboard text and image replacement in all relevant areas.  \n\nThis application should be production-ready and launchable directly from its folder."
        },
        {
          "title": "FlaskPython-General",
          "description": "",
          "content": "I need you to create a complete Flask Python web application with an advanced, responsive HTML/CSS GUI, full CRUD capabilities, robust attachment & audio handling, plus search and dashboard features.\nThe app need to fully function, no demo.\nProject Structure  \n- Single Git repository containing:  \n  - app.py — Flask app entry point  \n  - database.db — SQLite database file (empty schema)  \n  - temp_database.json — staging area for uncommitted edits  \n  - attachments/ — directory for uploaded media (empty)  \n  - templates/ — Jinja2 HTML templates  \n    - base.html, log_issue.html, view_issues.html, search.html, dashboard.html  \n  - static/ — CSS, JS, images  \n    - css/main.css, js/app.js  \n  - requirements.txt, init_db.py, setup.py  \n  - run.bat & run.sh — scripts to install dependencies, init DB, and start the server  \n\nDatabase Schema (in database.db)  \n- issues (`id`, title, description, status, priority, assignee, created_at, updated_at)  \n- attachments (`id`, issue_id → issues.id, filename, filepath, uploaded_at)  \n- audio_notes (`id`, issue_id → issues.id, filename, filepath, recorded_at)  \nCore Features & GUI Tabs  \n1. Log Issue (`/log`)  \n   - Form fields: title, description, status, priority, assignee.  \n   - Buttons: “Add Attachments” (file picker + Paste Image from Clipboard), “Record Audio Note”.  \n   - On “Create”: write to temp_database.json; on “Save”: INSERT into DB and clear staging.  \n2. Issue Viewer (`/issues`)  \n   - Scrollable, collapsible cards with ID, title, status, priority.  \n   - Click a card → modal popup showing full details, attachment thumbnails (right-side panel), audio player controls, download/open links.  \n3. Search Issues (`/search`)  \n   - Real-time fuzzy search on title & description, filters for status, priority, assignee, date range.  \n   - Results as cards with quick-view & link to detail modal.  \n4. Dashboard (`/dashboard`)  \n   - Summary widgets: total issues, counts by status/priority, recent activity timeline, charts of trends.  \nEdit & Delete Modes  \n- Edit Mode on any issue: all text fields, attachments, and audio notes can be edited, added, or deleted.  \n- Changes stage in temp_database.json; “Save Changes” commits via UPDATE and clears staging.  \n- Deleting an issue removes its DB rows and files; deleting a single attachment/audio removes its file + record.  \n\nSmart Clipboard Integration  \n- Wherever text contains {{placeholder}}, show “Replace with Clipboard” button.  \n- Paste images directly from clipboard into attachments preview.  \nVisual & UX Requirements  \n- Use brand-color as the primary accent.  \n- Glass-morphism panels on a subtle checkered background.  \n- High-contrast text; thick, glossy borders.  \n- Responsive: all panels & controls expand/stretch on resize.  \n- Minimum font sizes: main text 13 pt, buttons/inputs 12 pt.  \n- Tooltips on hover; full keyboard navigation (tab order, focus highlights).  \n- Full UTF-8 support for non-Latin scripts.  \n\nSetup & Deliverables  \n- requirements.txt with pinned deps.  \n- init_db.py to create schema.  \n- setup.py for pip installation.  \n- run.bat & run.sh to install, init DB, and launch app.py.  \n- Blank database.db schema, empty temp_database.json, empty attachments/.  \n- README with setup & launch instructions for Windows."
        },
        {
          "title": "Advanced Flask Template",
          "description": "",
          "content": "🎯 Comprehensive ChatGPT Prompt: Advanced Flask Issue Tracker Application\n\n 📋 Project Overview\n\nCreate a comprehensive, production-ready Flask web application for issue tracking and management. This should be a modern, responsive, and feature-rich system that rivals professional issue tracking tools like Jira or GitHub Issues.\n\n---\n\n 🏗️ Technical Stack Requirements\n\n Backend\n- Framework: Flask (Python 3.8+)\n- Database: SQLite with proper foreign key constraints\n- File Handling: Werkzeug for secure file uploads\n- Session Management: Flask sessions with secure secret keys\n- API: RESTful endpoints for AJAX operations\n\n Frontend\n- Styling: Modern CSS with glassmorphism design\n- JavaScript: Vanilla ES6+ (no external frameworks)\n- Templates: Jinja2 with template inheritance\n- Responsiveness: Mobile-first responsive design\n- Accessibility: WCAG 2.1 AA compliance\n\n Features\n- File Management: Multi-file uploads with drag-and-drop\n- Audio Recording: Browser-based audio note recording\n- Advanced Search: Real-time search with filtering\n- Data Visualization: Charts and statistics dashboard\n- Clipboard Integration: Advanced clipboard paste functionality\n\n---\n\n 🎨 Design Requirements\n\n Visual Theme\n- Style: Modern glassmorphism with gradient backgrounds\n- Color Scheme: Professional blue-purple gradient with high contrast\n- Typography: Clean, readable fonts (Segoe UI family)\n- Icons: Unicode emojis for visual appeal and universal compatibility\n- Animations: Smooth CSS transitions and hover effects\n\n Accessibility Requirements\n- Contrast: Minimum 4.5:1 contrast ratio for all text\n- Keyboard Navigation: Full keyboard accessibility\n- Screen Readers: Proper ARIA labels and semantic HTML\n- Focus Management: Clear focus indicators and logical tab order\n- Responsive Design: Works on all device sizes (320px+)\n\n---\n\n 🗄️ Database Schema\n\nCreate the following tables with proper relationships:\n\n Issues Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- title (TEXT NOT NULL)\n- description (TEXT)\n- status (TEXT DEFAULT 'Open')\n- priority (TEXT DEFAULT 'Medium')\n- assignee (TEXT)\n- created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n- updated_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n Attachments Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- issue_id (INTEGER FOREIGN KEY)\n- filename (TEXT NOT NULL)\n- filepath (TEXT NOT NULL)\n- uploaded_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n Audio Notes Table\n```sql\n- id (INTEGER PRIMARY KEY AUTOINCREMENT)\n- issue_id (INTEGER FOREIGN KEY)\n- filename (TEXT NOT NULL)\n- filepath (TEXT NOT NULL)\n- recorded_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\n```\n\n---\n\n 🚀 Core Features Implementation\n\n 1. Issue Management (CRUD)\n- Create: Full form with validation and file uploads\n- Read: List view with pagination and detailed modal views\n- Update: Inline editing with real-time updates\n- Delete: Confirmation dialogs with cascade deletion\n\n 2. File Handling System\n- Supported Formats: \n  - Images: PNG, JPG, JPEG, GIF, BMP, WEBP, SVG\n  - Documents: PDF, DOC, DOCX, TXT, RTF, ODT\n  - Audio: MP3, WAV, OGG, AAC, M4A, FLAC\n  - Archives: ZIP, RAR, 7Z, TAR, GZ\n- Features: \n  - Drag-and-drop upload\n  - File preview with thumbnails\n  - Size validation (100MB max)\n  - Secure filename handling\n  - Bulk upload support\n\n 3. Audio Recording\n- Browser Recording: MediaRecorder API integration\n- Features: \n  - Start/stop/play controls\n  - Real-time status updates\n  - Save to issue attachments\n  - Audio format conversion\n  - Permission handling\n\n 4. Advanced Search\n- Text Search: Full-text search in titles and descriptions\n- Filters: Status, Priority, Assignee, Date ranges\n- Live Search: Real-time search suggestions\n- Advanced Options: \n  - Exact phrase matching\n  - Case sensitivity toggle\n  - Search scope selection\n  - Result highlighting\n\n 5. Dashboard & Analytics\n- Metrics: Total issues, by status, by priority\n- Charts: Pie charts, line graphs, progress bars\n- Recent Activity: Latest updates and changes\n- Quick Actions: Rapid navigation and creation\n- System Status: Health monitoring display\n\n---\n\n 🎯 Advanced Features\n\n 1. Staging System\n- Temporary Storage: JSON-based staging before database commit\n- Preview Mode: Review changes before saving\n- Auto-save: Periodic form data preservation\n- Recovery: Restore unsaved work\n\n 2. Clipboard Integration\n- Smart Paste: Enhanced clipboard functionality\n- Image Paste: Direct image paste from clipboard\n- Text Processing: Automatic formatting and cleanup\n- Multiple Formats: Support for different content types\n\n 3. Modal System\n- Dynamic Loading: AJAX-powered content loading\n- Multiple Sizes: Responsive modal sizing\n- Keyboard Navigation: Full keyboard support\n- Focus Management: Proper focus trapping\n\n 4. Real-time Features\n- Live Updates: Auto-refresh for collaboration\n- Status Indicators: Connection and loading states\n- Error Recovery: Graceful error handling\n- Offline Support: Basic offline functionality\n\n---\n\n 📁 File Structure Requirements\n\n```\nflask-issue-tracker/\n├── app.py                  Main application file\n├── init_db.py             Database initialization\n├── requirements.txt       Python dependencies\n├── static/\n│   ├── css/\n│   │   └── main.css      Main stylesheet\n│   └── js/\n│       └── app.js        Main JavaScript\n├── templates/\n│   ├── base.html         Base template\n│   ├── dashboard.html    Dashboard page\n│   ├── log_issue.html    Create issue form\n│   ├── view_issues.html  Issues list\n│   └── search.html       Search page\n├── attachments/          File upload directory\n└── database.db          SQLite database\n```\n\n---\n\n 🔧 Specific Implementation Requirements\n\n Flask Routes\n```python\n@app.route('/')                            Redirect to dashboard\n@app.route('/dashboard')                   Main dashboard\n@app.route('/log', methods=['GET', 'POST'])   Create issue\n@app.route('/issues')                      List all issues\n@app.route('/issues/<id>')                Issue details (JSON)\n@app.route('/issues/<id>/edit')           Edit issue\n@app.route('/issues/<id>/delete')         Delete issue\n@app.route('/search')                     Search issues\n@app.route('/download/<filename>')        File downloads\n@app.route('/attachments/<id>/delete')    Delete attachment\n@app.route('/audio/<id>/delete')          Delete audio\n```\n\n JavaScript Modules\n```javascript\n// Core application modules\n- App (main application state)\n- Utils (utility functions)\n- ClipboardManager (clipboard functionality)\n- FileHandler (file upload and management)\n- AudioRecorder (audio recording features)\n- ModalManager (modal window management)\n- SearchManager (search and filtering)\n- FormManager (form handling and validation)\n- IssueManager (issue CRUD operations)\n- AccessibilityManager (accessibility features)\n```\n\n CSS Architecture\n- Variables: CSS custom properties for theming\n- Responsive: Mobile-first breakpoints\n- Components: Modular component styling\n- Utilities: Helper classes for common patterns\n- Animations: Smooth transitions and effects\n\n---\n\n 🎨 Styling Specifications\n\n Color Palette\n```css\n/ Primary Colors /\n--primary-color: 3B82F6;\n--primary-dark: 2563EB;\n--primary-light: 93C5FD;\n\n/ Status Colors /\n--success-color: 10B981;\n--warning-color: F59E0B;\n--error-color: EF4444;\n--info-color: 06B6D4;\n\n/ Glass Effect /\n--glass-bg: rgba(255, 255, 255, 0.1);\n--glass-border: rgba(255, 255, 255, 0.2);\n--glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n```\n\n Design Patterns\n- Glassmorphism: Semi-transparent elements with blur effects\n- Gradient Backgrounds: Dynamic gradient overlays\n- Micro-interactions: Hover states and click feedback\n- Progressive Enhancement: Works without JavaScript\n- Dark Theme Ready: Easy theme switching capability\n\n---\n\n 🧪 Testing Requirements\n\n Frontend Testing\n- Cross-browser: Chrome, Firefox, Safari, Edge\n- Responsive: Test on mobile, tablet, desktop\n- Accessibility: Screen reader and keyboard testing\n- Performance: Load time and interaction responsiveness\n\n Backend Testing\n- CRUD Operations: All database operations\n- File Uploads: Various file types and sizes\n- Error Handling: Invalid inputs and edge cases\n- Security: SQL injection and file upload security\n\n User Experience Testing\n- Workflow Testing: Complete user journeys\n- Error Recovery: Graceful error handling\n- Performance: Response times under load\n- Accessibility: Screen reader compatibility\n\n---\n\n 📖 Documentation Requirements\n\n Code Documentation\n- Inline Comments: Clear explanations for complex logic\n- Function Documentation: Parameters and return values\n- API Documentation: All endpoints with examples\n- Setup Instructions: Complete installation guide\n\n User Documentation\n- Feature Guide: How to use each feature\n- Troubleshooting: Common issues and solutions\n- Best Practices: Recommended usage patterns\n- FAQ: Frequently asked questions\n\n---\n\n 🔒 Security & Performance\n\n Security Requirements\n- Input Validation: All user inputs sanitized\n- File Upload Security: Type and size validation\n- SQL Injection Prevention: Parameterized queries\n- XSS Protection: Output escaping and CSP headers\n- CSRF Protection: Token-based protection\n\n Performance Optimizations\n- Database Indexing: Proper database indexes\n- File Compression: Optimize static assets\n- Caching: Appropriate caching strategies\n- Lazy Loading: Efficient resource loading\n- Minification: Compressed CSS and JavaScript\n\n---\n\n 🎯 Quality Standards\n\n Code Quality\n- PEP 8: Python code formatting standards\n- ESLint: JavaScript code quality\n- Clean Architecture: Well-organized, maintainable code\n- Error Handling: Comprehensive error management\n- Logging: Appropriate logging throughout\n\n User Experience\n- Intuitive Navigation: Clear, logical user flow\n- Fast Response Times: < 200ms for most operations\n- Visual Feedback: Clear loading and success states\n- Error Messages: Helpful, actionable error messages\n- Consistent Design: Uniform styling throughout\n\n---\n\n 🚀 Bonus Features (If Time Permits)\n\n Advanced Functionality\n- Bulk Operations: Multi-select and batch actions\n- Export/Import: CSV/JSON data exchange\n- Email Notifications: Status change notifications\n- User Authentication: Login and user management\n- Comments System: Discussion threads on issues\n- File Versioning: Track file changes over time\n- Advanced Charts: Interactive data visualizations\n- API Endpoints: RESTful API for external integration\n\n Developer Features\n- Admin Panel: System administration interface\n- Audit Logs: Track all system changes\n- Backup System: Automated data backups\n- Performance Monitoring: System health tracking\n- Plugin System: Extensible architecture\n\n---\n\n 📝 Implementation Approach\n\n Phase 1: Core Foundation\n1. Set up Flask application structure\n2. Create database schema and initialization\n3. Implement basic CRUD operations\n4. Create base templates and styling\n\n Phase 2: Enhanced Features\n1. Add file upload functionality\n2. Implement search and filtering\n3. Create dashboard with statistics\n4. Add modal system for detailed views\n\n Phase 3: Advanced Features\n1. Audio recording capabilities\n2. Advanced clipboard integration\n3. Real-time search and updates\n4. Performance optimizations\n\n Phase 4: Polish & Testing\n1. Accessibility improvements\n2. Cross-browser testing\n3. Performance optimization\n4. Documentation completion\n\n---\n\n 🎯 Success Criteria\n\nThe application should meet these criteria:\n- ✅ Functional: All features work as specified\n- ✅ Responsive: Works on all device sizes\n- ✅ Accessible: Meets WCAG 2.1 AA standards\n- ✅ Performant: Fast response times and smooth interactions\n- ✅ Secure: Properly handles all security concerns\n- ✅ Maintainable: Clean, well-documented code\n- ✅ Professional: Production-ready quality and appearance\n\n---\n\n 📋 Deliverables Checklist\n\n Required Files\n- [ ] `app.py` - Complete Flask application\n- [ ] `init_db.py` - Database initialization script\n- [ ] `requirements.txt` - Python dependencies\n- [ ] `main.css` - Complete stylesheet\n- [ ] `app.js` - JavaScript functionality\n- [ ] All HTML templates (base, dashboard, log_issue, view_issues, search)\n- [ ] README.md with setup instructions\n- [ ] Documentation for all features\n\n Code Quality\n- [ ] No syntax errors or warnings\n- [ ] Proper error handling throughout\n- [ ] Clean, readable code with comments\n- [ ] Consistent naming conventions\n- [ ] Security best practices implemented\n\n Testing\n- [ ] All features manually tested\n- [ ] Cross-browser compatibility verified\n- [ ] Mobile responsiveness confirmed\n- [ ] Accessibility features validated\n- [ ] Performance benchmarks met\n\n---\n\nPlease implement this Flask Issue Tracker application step by step, ensuring each component is fully functional before moving to the next. Focus on creating production-quality code with excellent user experience and robust error handling."
        }
      ]
    },
    "Business": {
      "name": "Business",
      "description": "",
      "prompts": [
        {
          "title": "Strategy Brainstormer",
          "description": "Provide Solution to Business Problem",
          "content": "You are a world-class strategy consultant skilled in competitive analysis, pricing, growth loops, and product strategy. \nIf you can’t find data, say so. \nContext: \n   -   Company: [COMPANY]\n   -   Industry: [INDUSTRY]\n   -   Current Status: [Brief summary: what the company does, how it makes money, who it serves, pricing model, and growth tactics]\n   -   Challenges: [List the main issues — e.g., flat growth, rising costs, regulation]\n\nYour Task: \n   -   Analyze the competition: \n       •  Find 3–5 direct competitors and 1–2 adjacent ones. \n       •  For each, explain how they’re positioned, what they charge, and what they’re doing. Find opportunities: \n       •  Compare [COMPANY] to competitors. \n       •  List 5+ growth or profit levers they haven’t used yet. \nPrioritize: \n       •  Score each idea: Impact: Revenue/profit upside (1–5) Feasibility: Ease + speed (1–5) \n       •  Recommend the top 3 based on both scores. \n\nHow to Work: Go deep.\nRead up to 200 pages if needed. Use any source: websites, tools, forums, data platforms."
        }
      ]
    }
  },
  "version": "1.0"
}